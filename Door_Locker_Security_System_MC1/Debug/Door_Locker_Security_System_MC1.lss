
Door_Locker_Security_System_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00800060  00003f24  00003fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001d0  008001d0  00004128  2**0
                  ALLOC
  3 .stab         00003a44  00000000  00000000  00004128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027e5  00000000  00000000  00007b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a351  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a491  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c24a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d135  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <main>
      8a:	0c 94 90 1f 	jmp	0x3f20	; 0x3f20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA_REG.Bits.U2X_Bit = 1;
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB_REG.Bits.TXEN_Bit = 1;
     b64:	ea e2       	ldi	r30, 0x2A	; 42
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 60       	ori	r24, 0x08	; 8
     b6c:	80 83       	st	Z, r24
	UCSRB_REG.Bits.RXEN_Bit = 1;
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC_REG.Bits.URSEL_Bit = 1;
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	80 83       	st	Z, r24
	UCSRC_REG.Bits.UCPOL_Bit = 0;
     b82:	e0 e4       	ldi	r30, 0x40	; 64
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8e 7f       	andi	r24, 0xFE	; 254
     b8a:	80 83       	st	Z, r24

	/*
	 * insert the required mode in UMSEL bit of UCSRC Register
	 */
	UCSRC_REG.Bits.UMSEL_Bit = Config_Ptr->mode;
     b8c:	a0 e4       	ldi	r26, 0x40	; 64
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	eb 81       	ldd	r30, Y+3	; 0x03
     b92:	fc 81       	ldd	r31, Y+4	; 0x04
     b94:	80 81       	ld	r24, Z
     b96:	81 70       	andi	r24, 0x01	; 1
     b98:	81 70       	andi	r24, 0x01	; 1
     b9a:	98 2f       	mov	r25, r24
     b9c:	92 95       	swap	r25
     b9e:	99 0f       	add	r25, r25
     ba0:	99 0f       	add	r25, r25
     ba2:	90 7c       	andi	r25, 0xC0	; 192
     ba4:	8c 91       	ld	r24, X
     ba6:	8f 7b       	andi	r24, 0xBF	; 191
     ba8:	89 2b       	or	r24, r25
     baa:	8c 93       	st	X, r24

	/*
	 * insert the required parity mode in UPM1 bit (UPM0 and UPM1) of UCSRC Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xCF) | ((Config_Ptr->parity) << 4);
     bac:	a0 e4       	ldi	r26, 0x40	; 64
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e0 e4       	ldi	r30, 0x40	; 64
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	28 2f       	mov	r18, r24
     bb8:	2f 7c       	andi	r18, 0xCF	; 207
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	81 81       	ldd	r24, Z+1	; 0x01
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	82 95       	swap	r24
     bc6:	92 95       	swap	r25
     bc8:	90 7f       	andi	r25, 0xF0	; 240
     bca:	98 27       	eor	r25, r24
     bcc:	80 7f       	andi	r24, 0xF0	; 240
     bce:	98 27       	eor	r25, r24
     bd0:	82 2b       	or	r24, r18
     bd2:	8c 93       	st	X, r24

	/*
	 * insert the required stop bit in USBS bit of UCSRC Register
	 */
	UCSRC_REG.Bits.USBS_Bit = Config_Ptr->stopBit;
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	eb 81       	ldd	r30, Y+3	; 0x03
     bda:	fc 81       	ldd	r31, Y+4	; 0x04
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	81 70       	andi	r24, 0x01	; 1
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	98 2f       	mov	r25, r24
     be4:	99 0f       	add	r25, r25
     be6:	99 0f       	add	r25, r25
     be8:	99 0f       	add	r25, r25
     bea:	8c 91       	ld	r24, X
     bec:	87 7f       	andi	r24, 0xF7	; 247
     bee:	89 2b       	or	r24, r25
     bf0:	8c 93       	st	X, r24

	/*
	 * insert the required character size in UCSZ bits(UCSZ0, UCSZ1 and UCSZ2) of UCSRC and UCSRB Register
	 */
	UCSRC_REG.Byte = (UCSRC_REG.Byte & 0xF9)
     bf2:	a0 e4       	ldi	r26, 0x40	; 64
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	28 2f       	mov	r18, r24
     bfe:	29 7f       	andi	r18, 0xF9	; 249
     c00:	eb 81       	ldd	r30, Y+3	; 0x03
     c02:	fc 81       	ldd	r31, Y+4	; 0x04
     c04:	83 81       	ldd	r24, Z+3	; 0x03
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	86 70       	andi	r24, 0x06	; 6
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24
			| (((Config_Ptr->characterSize) << 1) & 0x06);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baudRate) * 8UL))) - 1);
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	95 81       	ldd	r25, Z+5	; 0x05
     c1c:	a6 81       	ldd	r26, Z+6	; 0x06
     c1e:	b7 81       	ldd	r27, Z+7	; 0x07
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	aa 1f       	adc	r26, r26
     c36:	bb 1f       	adc	r27, r27
     c38:	9c 01       	movw	r18, r24
     c3a:	ad 01       	movw	r20, r26
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	92 e1       	ldi	r25, 0x12	; 18
     c40:	aa e7       	ldi	r26, 0x7A	; 122
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__udivmodsi4>
     c4c:	da 01       	movw	r26, r20
     c4e:	c9 01       	movw	r24, r18
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value >> 8;
     c56:	e0 e4       	ldi	r30, 0x40	; 64
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	89 2f       	mov	r24, r25
     c60:	99 27       	eor	r25, r25
     c62:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
     c64:	e9 e2       	ldi	r30, 0x29	; 41
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	80 83       	st	Z, r24
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	0f 92       	push	r0
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA_REG.Bits.UDRE_Bit == 0)
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 72       	andi	r24, 0x20	; 32
     c8e:	88 23       	and	r24, r24
     c90:	d1 f3       	breq	.-12     	; 0xc86 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
     c92:	ec e2       	ldi	r30, 0x2C	; 44
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	80 83       	st	Z, r24
}
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA_REG.Bits.RXC_Bit == 0)
     caa:	eb e2       	ldi	r30, 0x2B	; 43
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 78       	andi	r24, 0x80	; 128
     cb2:	88 23       	and	r24, r24
     cb4:	d1 f3       	breq	.-12     	; 0xcaa <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR_REG;
     cb6:	ec e2       	ldi	r30, 0x2C	; 44
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <UART_sendString+0x6>
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9b 83       	std	Y+3, r25	; 0x03
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cd2:	19 82       	std	Y+1, r1	; 0x01
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	fc 01       	movw	r30, r24
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	80 81       	ld	r24, Z
     ce8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
		i++;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	fc 01       	movw	r30, r24
     cfe:	e2 0f       	add	r30, r18
     d00:	f3 1f       	adc	r31, r19
     d02:	80 81       	ld	r24, Z
     d04:	88 23       	and	r24, r24
     d06:	39 f7       	brne	.-50     	; 0xcd6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_receiveString+0xa>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d28:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	9b 81       	ldd	r25, Y+3	; 0x03
     d34:	8c 01       	movw	r16, r24
     d36:	02 0f       	add	r16, r18
     d38:	13 1f       	adc	r17, r19
     d3a:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_recieveByte>
     d3e:	f8 01       	movw	r30, r16
     d40:	80 83       	st	Z, r24
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	8c 01       	movw	r16, r24
     d56:	02 0f       	add	r16, r18
     d58:	13 1f       	adc	r17, r19
     d5a:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_recieveByte>
     d5e:	f8 01       	movw	r30, r16
     d60:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	9b 81       	ldd	r25, Y+3	; 0x03
     d6c:	fc 01       	movw	r30, r24
     d6e:	e2 0f       	add	r30, r18
     d70:	f3 1f       	adc	r31, r19
     d72:	80 81       	ld	r24, Z
     d74:	83 32       	cpi	r24, 0x23	; 35
     d76:	31 f7       	brne	.-52     	; 0xd44 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	fc 01       	movw	r30, r24
     d84:	e2 0f       	add	r30, r18
     d86:	f3 1f       	adc	r31, r19
     d88:	10 82       	st	Z, r1
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     dc4:	80 91 d0 01 	lds	r24, 0x01D0
     dc8:	90 91 d1 01 	lds	r25, 0x01D1
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	29 f0       	breq	.+10     	; 0xdda <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     dd0:	e0 91 d0 01 	lds	r30, 0x01D0
     dd4:	f0 91 d1 01 	lds	r31, 0x01D1
     dd8:	09 95       	icall
	}
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	bf 91       	pop	r27
     de4:	af 91       	pop	r26
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	7f 91       	pop	r23
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
     e2a:	80 91 d0 01 	lds	r24, 0x01D0
     e2e:	90 91 d1 01 	lds	r25, 0x01D1
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	29 f0       	breq	.+10     	; 0xe40 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
     e36:	e0 91 d0 01 	lds	r30, 0x01D0
     e3a:	f0 91 d1 01 	lds	r31, 0x01D1
     e3e:	09 95       	icall
	}
}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer1_init(const TIMER1_ConfigType *Config_Ptr)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <Timer1_init+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
	 * FOC1A    = 1   Force Output Compare for Compare unit A (non-PWM mode)
	 * FOC1B    = 1   Force Output Compare for Compare unit B (non-PWM mode)
	 * WGM11:0        Waveform Generation Mode, selected in configuration
	 ***********************************************************************/

	TCCR1A_REG.Bits.FOC1A_Bit = 1;
     e74:	ef e4       	ldi	r30, 0x4F	; 79
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 60       	ori	r24, 0x08	; 8
     e7c:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_Bit = 1;
     e7e:	ef e4       	ldi	r30, 0x4F	; 79
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	80 83       	st	Z, r24

	/*
	 * insert the required mode in WGM bits (WGM10 and WGM11) of TCCR1A Register
	 * and (WGM12 and WGM13) of TCCR1B Register
	 */
	if (Config_Ptr->mode == NORMAL_MODE)
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	84 81       	ldd	r24, Z+4	; 0x04
     e8e:	88 23       	and	r24, r24
     e90:	a9 f4       	brne	.+42     	; 0xebc <Timer1_init+0x56>
	{
		TCCR1A_REG.Bits.WGM10_Bit = 0;
     e92:	ef e4       	ldi	r30, 0x4F	; 79
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
     e9c:	ef e4       	ldi	r30, 0x4F	; 79
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 0;
     ea6:	ee e4       	ldi	r30, 0x4E	; 78
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
     eb0:	ee e4       	ldi	r30, 0x4E	; 78
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	80 83       	st	Z, r24
     eba:	19 c0       	rjmp	.+50     	; 0xeee <Timer1_init+0x88>
	}
	else if (Config_Ptr->mode == CTC_MODE)
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	84 81       	ldd	r24, Z+4	; 0x04
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	a1 f4       	brne	.+40     	; 0xeee <Timer1_init+0x88>
	{
		TCCR1A_REG.Bits.WGM10_Bit = 0;
     ec6:	ef e4       	ldi	r30, 0x4F	; 79
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8e 7f       	andi	r24, 0xFE	; 254
     ece:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_Bit = 0;
     ed0:	ef e4       	ldi	r30, 0x4F	; 79
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8d 7f       	andi	r24, 0xFD	; 253
     ed8:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_Bit = 1;
     eda:	ee e4       	ldi	r30, 0x4E	; 78
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_Bit = 0;
     ee4:	ee e4       	ldi	r30, 0x4E	; 78
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7e       	andi	r24, 0xEF	; 239
     eec:	80 83       	st	Z, r24
	 * ICNC1    = 0   Input Capture Noise Canceller
	 * ICES1    = 0   Input Capture Edge Select
	 * WGM13:2        Waveform Generation Mode, selected in configuration
	 * CS12:0   = 0   Clock Select, selected in configuration
	 ***********************************************************************/
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xF8) | (Config_Ptr->prescaler);
     eee:	ae e4       	ldi	r26, 0x4E	; 78
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ee e4       	ldi	r30, 0x4E	; 78
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	98 2f       	mov	r25, r24
     efa:	98 7f       	andi	r25, 0xF8	; 248
     efc:	e9 81       	ldd	r30, Y+1	; 0x01
     efe:	fa 81       	ldd	r31, Y+2	; 0x02
     f00:	85 81       	ldd	r24, Z+5	; 0x05
     f02:	89 2b       	or	r24, r25
     f04:	8c 93       	st	X, r24

	TCNT1_REG = Config_Ptr->initial_value;
     f06:	ac e4       	ldi	r26, 0x4C	; 76
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	9c 93       	st	X, r25
     f16:	8e 93       	st	-X, r24

	OCR1A_REG = Config_Ptr->compare_value;
     f18:	aa e4       	ldi	r26, 0x4A	; 74
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e9 81       	ldd	r30, Y+1	; 0x01
     f1e:	fa 81       	ldd	r31, Y+2	; 0x02
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24

	/* Enable Timer/Counter1 Output Compare A match interrupt */
	TIMSK_REG.Bits.OCIE1A_Bit = 1;
     f2a:	e9 e5       	ldi	r30, 0x59	; 89
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	80 83       	st	Z, r24

	/* Enable Timer/Counter1 Overflow Interrupt */
	TIMSK_REG.Bits.TOIE1_Bit = 1;
     f34:	e9 e5       	ldi	r30, 0x59	; 89
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	80 83       	st	Z, r24
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A_REG.Byte = 0;
     f50:	ef e4       	ldi	r30, 0x4F	; 79
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
	TCNT1_REG = 0;
     f5c:	ec e4       	ldi	r30, 0x4C	; 76
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	11 82       	std	Z+1, r1	; 0x01
     f62:	10 82       	st	Z, r1
	OCR1A_REG = 0;
     f64:	ea e4       	ldi	r30, 0x4A	; 74
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	11 82       	std	Z+1, r1	; 0x01
     f6a:	10 82       	st	Z, r1

	/* Disable the Output Compare A match and Overflow interrupt */
	TIMSK_REG.Bits.OCIE1A_Bit = 1;
     f6c:	e9 e5       	ldi	r30, 0x59	; 89
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 61       	ori	r24, 0x10	; 16
     f74:	80 83       	st	Z, r24
	TIMSK_REG.Bits.TOIE1_Bit = 1;
     f76:	e9 e5       	ldi	r30, 0x59	; 89
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     f80:	10 92 d1 01 	sts	0x01D1, r1
     f84:	10 92 d0 01 	sts	0x01D0, r1
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <Timer1_setCallBack+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	90 93 d1 01 	sts	0x01D1, r25
     fa4:	80 93 d0 01 	sts	0x01D0, r24
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <GPIO_setupPinDirection+0x6>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <GPIO_setupPinDirection+0x8>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	6a 83       	std	Y+2, r22	; 0x02
     fc4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	08 f0       	brcs	.+2      	; 0xfce <GPIO_setupPinDirection+0x1c>
     fcc:	d5 c0       	rjmp	.+426    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	84 30       	cpi	r24, 0x04	; 4
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <GPIO_setupPinDirection+0x24>
     fd4:	d1 c0       	rjmp	.+418    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3d 83       	std	Y+5, r19	; 0x05
     fde:	2c 83       	std	Y+4, r18	; 0x04
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <GPIO_setupPinDirection+0x3a>
     fea:	43 c0       	rjmp	.+134    	; 0x1072 <GPIO_setupPinDirection+0xc0>
     fec:	2c 81       	ldd	r18, Y+4	; 0x04
     fee:	3d 81       	ldd	r19, Y+5	; 0x05
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <GPIO_setupPinDirection+0x4e>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	71 f0       	breq	.+28     	; 0x101a <GPIO_setupPinDirection+0x68>
     ffe:	bc c0       	rjmp	.+376    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <GPIO_setupPinDirection+0x5a>
    100a:	5f c0       	rjmp	.+190    	; 0x10ca <GPIO_setupPinDirection+0x118>
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	9d 81       	ldd	r25, Y+5	; 0x05
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <GPIO_setupPinDirection+0x66>
    1016:	85 c0       	rjmp	.+266    	; 0x1122 <GPIO_setupPinDirection+0x170>
    1018:	af c0       	rjmp	.+350    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG.Byte, pin_num);
    1020:	aa e3       	ldi	r26, 0x3A	; 58
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ea e3       	ldi	r30, 0x3A	; 58
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0x8c>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0x88>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	98 c0       	rjmp	.+304    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
    1048:	aa e3       	ldi	r26, 0x3A	; 58
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_setupPinDirection+0xb4>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_setupPinDirection+0xb0>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	83 c0       	rjmp	.+262    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	a1 f4       	brne	.+40     	; 0x10a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG.Byte, pin_num);
    1078:	a7 e3       	ldi	r26, 0x37	; 55
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e7 e3       	ldi	r30, 0x37	; 55
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_setupPinDirection+0xe4>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_setupPinDirection+0xe0>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	6c c0       	rjmp	.+216    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
    10a0:	a7 e3       	ldi	r26, 0x37	; 55
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e7 e3       	ldi	r30, 0x37	; 55
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_setupPinDirection+0x10c>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_setupPinDirection+0x108>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	57 c0       	rjmp	.+174    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a1 f4       	brne	.+40     	; 0x10f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG.Byte, pin_num);
    10d0:	a4 e3       	ldi	r26, 0x34	; 52
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e4 e3       	ldi	r30, 0x34	; 52
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_setupPinDirection+0x13c>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_setupPinDirection+0x138>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	40 c0       	rjmp	.+128    	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
    10f8:	a4 e3       	ldi	r26, 0x34	; 52
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e4 e3       	ldi	r30, 0x34	; 52
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_setupPinDirection+0x164>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_setupPinDirection+0x160>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	2b c0       	rjmp	.+86     	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	a1 f4       	brne	.+40     	; 0x1150 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG.Byte, pin_num);
    1128:	a1 e3       	ldi	r26, 0x31	; 49
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e1 e3       	ldi	r30, 0x31	; 49
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_setupPinDirection+0x194>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_setupPinDirection+0x190>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
    1150:	a1 e3       	ldi	r26, 0x31	; 49
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e1 e3       	ldi	r30, 0x31	; 49
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_setupPinDirection+0x1bc>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_setupPinDirection+0x1b8>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_writePin+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_writePin+0x8>
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	6a 83       	std	Y+2, r22	; 0x02
    119a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <GPIO_writePin+0x1c>
    11a2:	d5 c0       	rjmp	.+426    	; 0x134e <GPIO_writePin+0x1c6>
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <GPIO_writePin+0x24>
    11aa:	d1 c0       	rjmp	.+418    	; 0x134e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin value as required */
		switch (port_num)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3d 83       	std	Y+5, r19	; 0x05
    11b4:	2c 83       	std	Y+4, r18	; 0x04
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <GPIO_writePin+0x3a>
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <GPIO_writePin+0xc0>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <GPIO_writePin+0x4e>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <GPIO_writePin+0x68>
    11d4:	bc c0       	rjmp	.+376    	; 0x134e <GPIO_writePin+0x1c6>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <GPIO_writePin+0x5a>
    11e0:	5f c0       	rjmp	.+190    	; 0x12a0 <GPIO_writePin+0x118>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <GPIO_writePin+0x66>
    11ec:	85 c0       	rjmp	.+266    	; 0x12f8 <GPIO_writePin+0x170>
    11ee:	af c0       	rjmp	.+350    	; 0x134e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 23       	and	r24, r24
    11f4:	a9 f4       	brne	.+42     	; 0x1220 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
    11f6:	ab e3       	ldi	r26, 0x3B	; 59
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e3       	ldi	r30, 0x3B	; 59
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x8c>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x88>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	97 c0       	rjmp	.+302    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA_REG.Byte, pin_num);
    1220:	ab e3       	ldi	r26, 0x3B	; 59
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_writePin+0xb6>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_writePin+0xb2>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	83 c0       	rjmp	.+262    	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 23       	and	r24, r24
    124c:	a9 f4       	brne	.+42     	; 0x1278 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0xe4>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0xe0>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	6b c0       	rjmp	.+214    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB_REG.Byte, pin_num);
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_writePin+0x10e>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_writePin+0x10a>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	57 c0       	rjmp	.+174    	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 23       	and	r24, r24
    12a4:	a9 f4       	brne	.+42     	; 0x12d0 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    12a6:	a5 e3       	ldi	r26, 0x35	; 53
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e3       	ldi	r30, 0x35	; 53
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_writePin+0x13c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_writePin+0x138>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC_REG.Byte, pin_num);
    12d0:	a5 e3       	ldi	r26, 0x35	; 53
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e5 e3       	ldi	r30, 0x35	; 53
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_writePin+0x166>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_writePin+0x162>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	2b c0       	rjmp	.+86     	; 0x134e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 23       	and	r24, r24
    12fc:	a9 f4       	brne	.+42     	; 0x1328 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    12fe:	a2 e3       	ldi	r26, 0x32	; 50
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_writePin+0x194>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_writePin+0x190>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	13 c0       	rjmp	.+38     	; 0x134e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD_REG.Byte, pin_num);
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_writePin+0x1be>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_writePin+0x1ba>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_readPin+0x6>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_readPin+0x8>
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 30       	cpi	r24, 0x08	; 8
    1376:	08 f0       	brcs	.+2      	; 0x137a <GPIO_readPin+0x1c>
    1378:	84 c0       	rjmp	.+264    	; 0x1482 <GPIO_readPin+0x124>
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	08 f0       	brcs	.+2      	; 0x1382 <GPIO_readPin+0x24>
    1380:	80 c0       	rjmp	.+256    	; 0x1482 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3d 83       	std	Y+5, r19	; 0x05
    138a:	2c 83       	std	Y+4, r18	; 0x04
    138c:	4c 81       	ldd	r20, Y+4	; 0x04
    138e:	5d 81       	ldd	r21, Y+5	; 0x05
    1390:	41 30       	cpi	r20, 0x01	; 1
    1392:	51 05       	cpc	r21, r1
    1394:	79 f1       	breq	.+94     	; 0x13f4 <GPIO_readPin+0x96>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	91 05       	cpc	r25, r1
    139e:	34 f4       	brge	.+12     	; 0x13ac <GPIO_readPin+0x4e>
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	21 15       	cp	r18, r1
    13a6:	31 05       	cpc	r19, r1
    13a8:	69 f0       	breq	.+26     	; 0x13c4 <GPIO_readPin+0x66>
    13aa:	6b c0       	rjmp	.+214    	; 0x1482 <GPIO_readPin+0x124>
    13ac:	4c 81       	ldd	r20, Y+4	; 0x04
    13ae:	5d 81       	ldd	r21, Y+5	; 0x05
    13b0:	42 30       	cpi	r20, 0x02	; 2
    13b2:	51 05       	cpc	r21, r1
    13b4:	b9 f1       	breq	.+110    	; 0x1424 <GPIO_readPin+0xc6>
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <GPIO_readPin+0x64>
    13c0:	49 c0       	rjmp	.+146    	; 0x1454 <GPIO_readPin+0xf6>
    13c2:	5f c0       	rjmp	.+190    	; 0x1482 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num))
    13c4:	e9 e3       	ldi	r30, 0x39	; 57
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_readPin+0x7e>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_readPin+0x7a>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	88 23       	and	r24, r24
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <GPIO_readPin+0x92>
			{
				value = LOGIC_HIGH;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	49 c0       	rjmp	.+146    	; 0x1482 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    13f0:	19 82       	std	Y+1, r1	; 0x01
    13f2:	47 c0       	rjmp	.+142    	; 0x1482 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num))
    13f4:	e6 e3       	ldi	r30, 0x36	; 54
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_readPin+0xae>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_readPin+0xaa>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	88 23       	and	r24, r24
    1418:	19 f0       	breq	.+6      	; 0x1420 <GPIO_readPin+0xc2>
			{
				value = LOGIC_HIGH;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	31 c0       	rjmp	.+98     	; 0x1482 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1420:	19 82       	std	Y+1, r1	; 0x01
    1422:	2f c0       	rjmp	.+94     	; 0x1482 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num))
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_readPin+0xde>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_readPin+0xda>
    1440:	ca 01       	movw	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	88 23       	and	r24, r24
    1448:	19 f0       	breq	.+6      	; 0x1450 <GPIO_readPin+0xf2>
			{
				value = LOGIC_HIGH;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	19 c0       	rjmp	.+50     	; 0x1482 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1450:	19 82       	std	Y+1, r1	; 0x01
    1452:	17 c0       	rjmp	.+46     	; 0x1482 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num))
    1454:	e0 e3       	ldi	r30, 0x30	; 48
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_readPin+0x10e>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_readPin+0x10a>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	88 23       	and	r24, r24
    1478:	19 f0       	breq	.+6      	; 0x1480 <GPIO_readPin+0x122>
			{
				value = LOGIC_HIGH;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1480:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_setupPortDirection+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <GPIO_setupPortDirection+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	90 f5       	brcc	.+100    	; 0x150e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <GPIO_setupPortDirection+0x5e>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <GPIO_setupPortDirection+0x3e>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <GPIO_setupPortDirection+0x54>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <GPIO_setupPortDirection+0x7a>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <GPIO_setupPortDirection+0x68>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <GPIO_setupPortDirection+0x72>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    14e8:	ea e3       	ldi	r30, 0x3A	; 58
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    14f2:	e7 e3       	ldi	r30, 0x37	; 55
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	04 c0       	rjmp	.+8      	; 0x150e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
			break;
		}
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_writePort+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <GPIO_writePort+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	90 f5       	brcc	.+100    	; 0x1596 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch (port_num)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3c 83       	std	Y+4, r19	; 0x04
    153a:	2b 83       	std	Y+3, r18	; 0x03
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	d1 f0       	breq	.+52     	; 0x157a <GPIO_writePort+0x5e>
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <GPIO_writePort+0x3e>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 f0       	breq	.+24     	; 0x1570 <GPIO_writePort+0x54>
    1558:	1e c0       	rjmp	.+60     	; 0x1596 <GPIO_writePort+0x7a>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	81 f0       	breq	.+32     	; 0x1584 <GPIO_writePort+0x68>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	81 f0       	breq	.+32     	; 0x158e <GPIO_writePort+0x72>
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    1570:	eb e3       	ldi	r30, 0x3B	; 59
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	80 83       	st	Z, r24
    1578:	0e c0       	rjmp	.+28     	; 0x1596 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    157a:	e8 e3       	ldi	r30, 0x38	; 56
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	80 83       	st	Z, r24
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    1584:	e5 e3       	ldi	r30, 0x35	; 53
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 83       	st	Z, r24
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    158e:	e2 e3       	ldi	r30, 0x32	; 50
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 83       	st	Z, r24
			break;
		}
	}
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <GPIO_readPort+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <GPIO_readPort+0x8>
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	10 f0       	brcs	.+4      	; 0x15c0 <GPIO_readPort+0x1c>
	{
		return 0;
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	34 c0       	rjmp	.+104    	; 0x1628 <GPIO_readPort+0x84>
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3c 83       	std	Y+4, r19	; 0x04
    15c8:	2b 83       	std	Y+3, r18	; 0x03
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	d1 f0       	breq	.+52     	; 0x1608 <GPIO_readPort+0x64>
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <GPIO_readPort+0x44>
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	61 f0       	breq	.+24     	; 0x15fe <GPIO_readPort+0x5a>
    15e6:	1e c0       	rjmp	.+60     	; 0x1624 <GPIO_readPort+0x80>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <GPIO_readPort+0x6e>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	91 05       	cpc	r25, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <GPIO_readPort+0x78>
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    15fe:	e9 e3       	ldi	r30, 0x39	; 57
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    1612:	e3 e3       	ldi	r30, 0x33	; 51
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    161c:	e0 e3       	ldi	r30, 0x30	; 48
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1624:	99 81       	ldd	r25, Y+1	; 0x01
    1626:	9d 83       	std	Y+5, r25	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	2e 97       	sbiw	r28, 0x0e	; 14
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 ea       	ldi	r26, 0xA0	; 160
    1668:	b1 e4       	ldi	r27, 0x41	; 65
    166a:	8b 87       	std	Y+11, r24	; 0x0b
    166c:	9c 87       	std	Y+12, r25	; 0x0c
    166e:	ad 87       	std	Y+13, r26	; 0x0d
    1670:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a ef       	ldi	r20, 0xFA	; 250
    1680:	54 e4       	ldi	r21, 0x44	; 68
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8f 83       	std	Y+7, r24	; 0x07
    168c:	98 87       	std	Y+8, r25	; 0x08
    168e:	a9 87       	std	Y+9, r26	; 0x09
    1690:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <LCD_init+0x7a>
		__ticks = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_init+0xda>
    16f6:	88 ec       	ldi	r24, 0xC8	; 200
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_init+0xc8>
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f7       	brne	.-38     	; 0x16f6 <LCD_init+0xbc>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_init+0x104>
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

#if (LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	63 e0       	ldi	r22, 0x03	; 3
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	64 e0       	ldi	r22, 0x04	; 4
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	66 e0       	ldi	r22, 0x06	; 6
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    176e:	83 e3       	ldi	r24, 0x33	; 51
    1770:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1774:	82 e3       	ldi	r24, 0x32	; 50
    1776:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    177a:	88 e2       	ldi	r24, 0x28	; 40
    177c:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1780:	8c e0       	ldi	r24, 0x0C	; 12
    1782:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
}
    178c:	2e 96       	adiw	r28, 0x0e	; 14
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 a_command)
{
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	c3 56       	subi	r28, 0x63	; 99
    17ac:	d0 40       	sbci	r29, 0x00	; 0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	fe 01       	movw	r30, r28
    17ba:	ed 59       	subi	r30, 0x9D	; 157
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    17ca:	fe 01       	movw	r30, r28
    17cc:	e1 5a       	subi	r30, 0xA1	; 161
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e8       	ldi	r26, 0x80	; 128
    17d6:	bf e3       	ldi	r27, 0x3F	; 63
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	8e 01       	movw	r16, r28
    17e2:	05 5a       	subi	r16, 0xA5	; 165
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	e1 5a       	subi	r30, 0xA1	; 161
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180e:	fe 01       	movw	r30, r28
    1810:	e5 5a       	subi	r30, 0xA5	; 165
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e8       	ldi	r20, 0x80	; 128
    1822:	5f e3       	ldi	r21, 0x3F	; 63
    1824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1828:	88 23       	and	r24, r24
    182a:	44 f4       	brge	.+16     	; 0x183c <LCD_sendCommand+0x9e>
		__ticks = 1;
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5a       	subi	r30, 0xA7	; 167
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	64 c0       	rjmp	.+200    	; 0x1904 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    183c:	fe 01       	movw	r30, r28
    183e:	e5 5a       	subi	r30, 0xA5	; 165
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	0c f0       	brlt	.+2      	; 0x185c <LCD_sendCommand+0xbe>
    185a:	43 c0       	rjmp	.+134    	; 0x18e2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	fe 01       	movw	r30, r28
    185e:	e1 5a       	subi	r30, 0xA1	; 161
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8e 01       	movw	r16, r28
    187c:	07 5a       	subi	r16, 0xA7	; 167
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	f8 01       	movw	r30, r16
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	1f c0       	rjmp	.+62     	; 0x18d2 <LCD_sendCommand+0x134>
    1894:	fe 01       	movw	r30, r28
    1896:	e9 5a       	subi	r30, 0xA9	; 169
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	fe 01       	movw	r30, r28
    18a4:	e9 5a       	subi	r30, 0xA9	; 169
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_sendCommand+0x10e>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e9 5a       	subi	r30, 0xA9	; 169
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	de 01       	movw	r26, r28
    18bc:	a7 5a       	subi	r26, 0xA7	; 167
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e7 5a       	subi	r30, 0xA7	; 167
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	11 96       	adiw	r26, 0x01	; 1
    18ce:	9c 93       	st	X, r25
    18d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 5a       	subi	r30, 0xA7	; 167
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	d1 f6       	brne	.-76     	; 0x1894 <LCD_sendCommand+0xf6>
    18e0:	27 c0       	rjmp	.+78     	; 0x1930 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	8e 01       	movw	r16, r28
    18e4:	07 5a       	subi	r16, 0xA7	; 167
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	e5 5a       	subi	r30, 0xA5	; 165
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    1904:	de 01       	movw	r26, r28
    1906:	ab 5a       	subi	r26, 0xAB	; 171
    1908:	bf 4f       	sbci	r27, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e7 5a       	subi	r30, 0xA7	; 167
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	8d 93       	st	X+, r24
    1916:	9c 93       	st	X, r25
    1918:	fe 01       	movw	r30, r28
    191a:	eb 5a       	subi	r30, 0xAB	; 171
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_sendCommand+0x184>
    1926:	fe 01       	movw	r30, r28
    1928:	eb 5a       	subi	r30, 0xAB	; 171
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    193a:	fe 01       	movw	r30, r28
    193c:	ef 5a       	subi	r30, 0xAF	; 175
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	8e 01       	movw	r16, r28
    1952:	03 5b       	subi	r16, 0xB3	; 179
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	fe 01       	movw	r30, r28
    1958:	ef 5a       	subi	r30, 0xAF	; 175
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a ef       	ldi	r20, 0xFA	; 250
    196a:	54 e4       	ldi	r21, 0x44	; 68
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	f8 01       	movw	r30, r16
    1976:	80 83       	st	Z, r24
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	a2 83       	std	Z+2, r26	; 0x02
    197c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197e:	fe 01       	movw	r30, r28
    1980:	e3 5b       	subi	r30, 0xB3	; 179
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	44 f4       	brge	.+16     	; 0x19ac <LCD_sendCommand+0x20e>
		__ticks = 1;
    199c:	fe 01       	movw	r30, r28
    199e:	e5 5b       	subi	r30, 0xB5	; 181
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	64 c0       	rjmp	.+200    	; 0x1a74 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    19ac:	fe 01       	movw	r30, r28
    19ae:	e3 5b       	subi	r30, 0xB3	; 179
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	0c f0       	brlt	.+2      	; 0x19cc <LCD_sendCommand+0x22e>
    19ca:	43 c0       	rjmp	.+134    	; 0x1a52 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	fe 01       	movw	r30, r28
    19ce:	ef 5a       	subi	r30, 0xAF	; 175
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8e 01       	movw	r16, r28
    19ec:	05 5b       	subi	r16, 0xB5	; 181
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	f8 01       	movw	r30, r16
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	1f c0       	rjmp	.+62     	; 0x1a42 <LCD_sendCommand+0x2a4>
    1a04:	fe 01       	movw	r30, r28
    1a06:	e7 5b       	subi	r30, 0xB7	; 183
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	fe 01       	movw	r30, r28
    1a14:	e7 5b       	subi	r30, 0xB7	; 183
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_sendCommand+0x27e>
    1a20:	fe 01       	movw	r30, r28
    1a22:	e7 5b       	subi	r30, 0xB7	; 183
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	de 01       	movw	r26, r28
    1a2c:	a5 5b       	subi	r26, 0xB5	; 181
    1a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a30:	fe 01       	movw	r30, r28
    1a32:	e5 5b       	subi	r30, 0xB5	; 181
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	fe 01       	movw	r30, r28
    1a44:	e5 5b       	subi	r30, 0xB5	; 181
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	d1 f6       	brne	.-76     	; 0x1a04 <LCD_sendCommand+0x266>
    1a50:	27 c0       	rjmp	.+78     	; 0x1aa0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	8e 01       	movw	r16, r28
    1a54:	05 5b       	subi	r16, 0xB5	; 181
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e3 5b       	subi	r30, 0xB3	; 179
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	f8 01       	movw	r30, r16
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	de 01       	movw	r26, r28
    1a76:	a9 5b       	subi	r26, 0xB9	; 185
    1a78:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e5 5b       	subi	r30, 0xB5	; 181
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	8d 93       	st	X+, r24
    1a86:	9c 93       	st	X, r25
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e9 5b       	subi	r30, 0xB9	; 185
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x2f4>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e9 5b       	subi	r30, 0xB9	; 185
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_command, 4));
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ed 59       	subi	r30, 0x9D	; 157
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	80 71       	andi	r24, 0x10	; 16
    1aae:	90 70       	andi	r25, 0x00	; 0
    1ab0:	95 95       	asr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	95 95       	asr	r25
    1ab6:	87 95       	ror	r24
    1ab8:	95 95       	asr	r25
    1aba:	87 95       	ror	r24
    1abc:	95 95       	asr	r25
    1abe:	87 95       	ror	r24
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	49 2f       	mov	r20, r25
    1ac8:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_command, 5));
    1acc:	fe 01       	movw	r30, r28
    1ace:	ed 59       	subi	r30, 0x9D	; 157
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	80 72       	andi	r24, 0x20	; 32
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	95 95       	asr	r25
    1ade:	87 95       	ror	r24
    1ae0:	95 95       	asr	r25
    1ae2:	87 95       	ror	r24
    1ae4:	95 95       	asr	r25
    1ae6:	87 95       	ror	r24
    1ae8:	95 95       	asr	r25
    1aea:	87 95       	ror	r24
    1aec:	95 95       	asr	r25
    1aee:	87 95       	ror	r24
    1af0:	98 2f       	mov	r25, r24
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	49 2f       	mov	r20, r25
    1af8:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_command, 6));
    1afc:	fe 01       	movw	r30, r28
    1afe:	ed 59       	subi	r30, 0x9D	; 157
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	80 74       	andi	r24, 0x40	; 64
    1b0a:	90 70       	andi	r25, 0x00	; 0
    1b0c:	08 2e       	mov	r0, r24
    1b0e:	89 2f       	mov	r24, r25
    1b10:	00 0c       	add	r0, r0
    1b12:	88 1f       	adc	r24, r24
    1b14:	99 0b       	sbc	r25, r25
    1b16:	00 0c       	add	r0, r0
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	65 e0       	ldi	r22, 0x05	; 5
    1b22:	49 2f       	mov	r20, r25
    1b24:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_command, 7));
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ed 59       	subi	r30, 0x9D	; 157
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	98 2f       	mov	r25, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	99 27       	eor	r25, r25
    1b36:	99 1f       	adc	r25, r25
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	66 e0       	ldi	r22, 0x06	; 6
    1b3c:	49 2f       	mov	r20, r25
    1b3e:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    1b42:	fe 01       	movw	r30, r28
    1b44:	ed 5b       	subi	r30, 0xBD	; 189
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	80 83       	st	Z, r24
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	a2 83       	std	Z+2, r26	; 0x02
    1b56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	8e 01       	movw	r16, r28
    1b5a:	01 5c       	subi	r16, 0xC1	; 193
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ed 5b       	subi	r30, 0xBD	; 189
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b86:	fe 01       	movw	r30, r28
    1b88:	ff 96       	adiw	r30, 0x3f	; 63
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_sendCommand+0x40e>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9e af       	std	Y+62, r25	; 0x3e
    1ba8:	8d af       	std	Y+61, r24	; 0x3d
    1baa:	46 c0       	rjmp	.+140    	; 0x1c38 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1bac:	fe 01       	movw	r30, r28
    1bae:	ff 96       	adiw	r30, 0x3f	; 63
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	64 f5       	brge	.+88     	; 0x1c20 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ed 5b       	subi	r30, 0xBD	; 189
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e af       	std	Y+62, r25	; 0x3e
    1bf4:	8d af       	std	Y+61, r24	; 0x3d
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_sendCommand+0x478>
    1bf8:	88 ec       	ldi	r24, 0xC8	; 200
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9c af       	std	Y+60, r25	; 0x3c
    1bfe:	8b af       	std	Y+59, r24	; 0x3b
    1c00:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c02:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_sendCommand+0x466>
    1c08:	9c af       	std	Y+60, r25	; 0x3c
    1c0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9e af       	std	Y+62, r25	; 0x3e
    1c14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_sendCommand+0x45a>
    1c1e:	16 c0       	rjmp	.+44     	; 0x1c4c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	fe 01       	movw	r30, r28
    1c22:	ff 96       	adiw	r30, 0x3f	; 63
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e af       	std	Y+62, r25	; 0x3e
    1c36:	8d af       	std	Y+61, r24	; 0x3d
    1c38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c3c:	9a af       	std	Y+58, r25	; 0x3a
    1c3e:	89 af       	std	Y+57, r24	; 0x39
    1c40:	89 ad       	ldd	r24, Y+57	; 0x39
    1c42:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_sendCommand+0x4a6>
    1c48:	9a af       	std	Y+58, r25	; 0x3a
    1c4a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	8d ab       	std	Y+53, r24	; 0x35
    1c60:	9e ab       	std	Y+54, r25	; 0x36
    1c62:	af ab       	std	Y+55, r26	; 0x37
    1c64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6d a9       	ldd	r22, Y+53	; 0x35
    1c68:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	89 ab       	std	Y+49, r24	; 0x31
    1c80:	9a ab       	std	Y+50, r25	; 0x32
    1c82:	ab ab       	std	Y+51, r26	; 0x33
    1c84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c86:	69 a9       	ldd	r22, Y+49	; 0x31
    1c88:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 ab       	std	Y+48, r25	; 0x30
    1ca4:	8f a7       	std	Y+47, r24	; 0x2f
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	98 ab       	std	Y+48, r25	; 0x30
    1ce6:	8f a7       	std	Y+47, r24	; 0x2f
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_sendCommand+0x56a>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
    1cf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_sendCommand+0x558>
    1cfa:	9e a7       	std	Y+46, r25	; 0x2e
    1cfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <LCD_sendCommand+0x54c>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	98 ab       	std	Y+48, r25	; 0x30
    1d24:	8f a7       	std	Y+47, r24	; 0x2f
    1d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d28:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
    1d2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_sendCommand+0x594>
    1d36:	9c a7       	std	Y+44, r25	; 0x2c
    1d38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	8f a3       	std	Y+39, r24	; 0x27
    1d4e:	98 a7       	std	Y+40, r25	; 0x28
    1d50:	a9 a7       	std	Y+41, r26	; 0x29
    1d52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	6f a1       	ldd	r22, Y+39	; 0x27
    1d56:	78 a5       	ldd	r23, Y+40	; 0x28
    1d58:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a ef       	ldi	r20, 0xFA	; 250
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8b a3       	std	Y+35, r24	; 0x23
    1d6e:	9c a3       	std	Y+36, r25	; 0x24
    1d70:	ad a3       	std	Y+37, r26	; 0x25
    1d72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d74:	6b a1       	ldd	r22, Y+35	; 0x23
    1d76:	7c a1       	ldd	r23, Y+36	; 0x24
    1d78:	8d a1       	ldd	r24, Y+37	; 0x25
    1d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	6f a1       	ldd	r22, Y+39	; 0x27
    1db0:	78 a5       	ldd	r23, Y+40	; 0x28
    1db2:	89 a5       	ldd	r24, Y+41	; 0x29
    1db4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9a a3       	std	Y+34, r25	; 0x22
    1dd4:	89 a3       	std	Y+33, r24	; 0x21
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <LCD_sendCommand+0x658>
    1dd8:	88 ec       	ldi	r24, 0xC8	; 200
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
    1de0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de2:	98 a1       	ldd	r25, Y+32	; 0x20
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_sendCommand+0x646>
    1de8:	98 a3       	std	Y+32, r25	; 0x20
    1dea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	89 a1       	ldd	r24, Y+33	; 0x21
    1df8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <LCD_sendCommand+0x63a>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_sendCommand+0x682>
    1e24:	9e 8f       	std	Y+30, r25	; 0x1e
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_command, 0));
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ed 59       	subi	r30, 0x9D	; 157
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	98 2f       	mov	r25, r24
    1e32:	91 70       	andi	r25, 0x01	; 1
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	49 2f       	mov	r20, r25
    1e3a:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_command, 1));
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ed 59       	subi	r30, 0x9D	; 157
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	82 70       	andi	r24, 0x02	; 2
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	95 95       	asr	r25
    1e50:	87 95       	ror	r24
    1e52:	98 2f       	mov	r25, r24
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	64 e0       	ldi	r22, 0x04	; 4
    1e58:	49 2f       	mov	r20, r25
    1e5a:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_command, 2));
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ed 59       	subi	r30, 0x9D	; 157
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	84 70       	andi	r24, 0x04	; 4
    1e6c:	90 70       	andi	r25, 0x00	; 0
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	95 95       	asr	r25
    1e74:	87 95       	ror	r24
    1e76:	98 2f       	mov	r25, r24
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	65 e0       	ldi	r22, 0x05	; 5
    1e7c:	49 2f       	mov	r20, r25
    1e7e:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_command, 3));
    1e82:	fe 01       	movw	r30, r28
    1e84:	ed 59       	subi	r30, 0x9D	; 157
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	88 70       	andi	r24, 0x08	; 8
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	95 95       	asr	r25
    1e94:	87 95       	ror	r24
    1e96:	95 95       	asr	r25
    1e98:	87 95       	ror	r24
    1e9a:	95 95       	asr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	66 e0       	ldi	r22, 0x06	; 6
    1ea4:	49 2f       	mov	r20, r25
    1ea6:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	bf e3       	ldi	r27, 0x3F	; 63
    1eb2:	89 8f       	std	Y+25, r24	; 0x19
    1eb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1eb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4a ef       	ldi	r20, 0xFA	; 250
    1ec8:	54 e4       	ldi	r21, 0x44	; 68
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	8d 8b       	std	Y+21, r24	; 0x15
    1ed4:	9e 8b       	std	Y+22, r25	; 0x16
    1ed6:	af 8b       	std	Y+23, r26	; 0x17
    1ed8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eda:	6d 89       	ldd	r22, Y+21	; 0x15
    1edc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ede:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	5f e3       	ldi	r21, 0x3F	; 63
    1eea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eee:	88 23       	and	r24, r24
    1ef0:	2c f4       	brge	.+10     	; 0x1efc <LCD_sendCommand+0x75e>
		__ticks = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 8b       	std	Y+20, r25	; 0x14
    1ef8:	8b 8b       	std	Y+19, r24	; 0x13
    1efa:	3f c0       	rjmp	.+126    	; 0x1f7a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	3f ef       	ldi	r19, 0xFF	; 255
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	57 e4       	ldi	r21, 0x47	; 71
    1f0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	4c f5       	brge	.+82     	; 0x1f66 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f14:	69 8d       	ldd	r22, Y+25	; 0x19
    1f16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e2       	ldi	r20, 0x20	; 32
    1f22:	51 e4       	ldi	r21, 0x41	; 65
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <LCD_sendCommand+0x7be>
    1f3e:	88 ec       	ldi	r24, 0xC8	; 200
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9a 8b       	std	Y+18, r25	; 0x12
    1f44:	89 8b       	std	Y+17, r24	; 0x11
    1f46:	89 89       	ldd	r24, Y+17	; 0x11
    1f48:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_sendCommand+0x7ac>
    1f4e:	9a 8b       	std	Y+18, r25	; 0x12
    1f50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	9c 8b       	std	Y+20, r25	; 0x14
    1f5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	69 f7       	brne	.-38     	; 0x1f3e <LCD_sendCommand+0x7a0>
    1f64:	14 c0       	rjmp	.+40     	; 0x1f8e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f66:	6d 89       	ldd	r22, Y+21	; 0x15
    1f68:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9c 8b       	std	Y+20, r25	; 0x14
    1f78:	8b 8b       	std	Y+19, r24	; 0x13
    1f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7e:	98 8b       	std	Y+16, r25	; 0x10
    1f80:	8f 87       	std	Y+15, r24	; 0x0f
    1f82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f84:	98 89       	ldd	r25, Y+16	; 0x10
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_sendCommand+0x7e8>
    1f8a:	98 8b       	std	Y+16, r25	; 0x10
    1f8c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	62 e0       	ldi	r22, 0x02	; 2
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e8       	ldi	r26, 0x80	; 128
    1f9e:	bf e3       	ldi	r27, 0x3F	; 63
    1fa0:	8b 87       	std	Y+11, r24	; 0x0b
    1fa2:	9c 87       	std	Y+12, r25	; 0x0c
    1fa4:	ad 87       	std	Y+13, r26	; 0x0d
    1fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
    1fc2:	98 87       	std	Y+8, r25	; 0x08
    1fc4:	a9 87       	std	Y+9, r26	; 0x09
    1fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fca:	78 85       	ldd	r23, Y+8	; 0x08
    1fcc:	89 85       	ldd	r24, Y+9	; 0x09
    1fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_sendCommand+0x84c>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	6b 85       	ldd	r22, Y+11	; 0x0b
    2004:	7c 85       	ldd	r23, Y+12	; 0x0c
    2006:	8d 85       	ldd	r24, Y+13	; 0x0d
    2008:	9e 85       	ldd	r25, Y+14	; 0x0e
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	0f c0       	rjmp	.+30     	; 0x204a <LCD_sendCommand+0x8ac>
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_sendCommand+0x89a>
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <LCD_sendCommand+0x88e>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_sendCommand+0x8d6>
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, a_command);		   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    207c:	cd 59       	subi	r28, 0x9D	; 157
    207e:	df 4f       	sbci	r29, 0xFF	; 255
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 a_data)
{
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	c3 56       	subi	r28, 0x63	; 99
    20a2:	d0 40       	sbci	r29, 0x00	; 0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	fe 01       	movw	r30, r28
    20b0:	ed 59       	subi	r30, 0x9D	; 157
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    20c0:	fe 01       	movw	r30, r28
    20c2:	e1 5a       	subi	r30, 0xA1	; 161
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a0 e8       	ldi	r26, 0x80	; 128
    20cc:	bf e3       	ldi	r27, 0x3F	; 63
    20ce:	80 83       	st	Z, r24
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	a2 83       	std	Z+2, r26	; 0x02
    20d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	8e 01       	movw	r16, r28
    20d8:	05 5a       	subi	r16, 0xA5	; 165
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	e1 5a       	subi	r30, 0xA1	; 161
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 83       	st	Z, r24
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2104:	fe 01       	movw	r30, r28
    2106:	e5 5a       	subi	r30, 0xA5	; 165
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	44 f4       	brge	.+16     	; 0x2132 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2122:	fe 01       	movw	r30, r28
    2124:	e7 5a       	subi	r30, 0xA7	; 167
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	64 c0       	rjmp	.+200    	; 0x21fa <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2132:	fe 01       	movw	r30, r28
    2134:	e5 5a       	subi	r30, 0xA5	; 165
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	0c f0       	brlt	.+2      	; 0x2152 <LCD_displayCharacter+0xbe>
    2150:	43 c0       	rjmp	.+134    	; 0x21d8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	fe 01       	movw	r30, r28
    2154:	e1 5a       	subi	r30, 0xA1	; 161
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8e 01       	movw	r16, r28
    2172:	07 5a       	subi	r16, 0xA7	; 167
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	f8 01       	movw	r30, r16
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	80 83       	st	Z, r24
    2188:	1f c0       	rjmp	.+62     	; 0x21c8 <LCD_displayCharacter+0x134>
    218a:	fe 01       	movw	r30, r28
    218c:	e9 5a       	subi	r30, 0xA9	; 169
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
    2198:	fe 01       	movw	r30, r28
    219a:	e9 5a       	subi	r30, 0xA9	; 169
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_displayCharacter+0x10e>
    21a6:	fe 01       	movw	r30, r28
    21a8:	e9 5a       	subi	r30, 0xA9	; 169
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	de 01       	movw	r26, r28
    21b2:	a7 5a       	subi	r26, 0xA7	; 167
    21b4:	bf 4f       	sbci	r27, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 5a       	subi	r30, 0xA7	; 167
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	11 96       	adiw	r26, 0x01	; 1
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e7 5a       	subi	r30, 0xA7	; 167
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	d1 f6       	brne	.-76     	; 0x218a <LCD_displayCharacter+0xf6>
    21d6:	27 c0       	rjmp	.+78     	; 0x2226 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	8e 01       	movw	r16, r28
    21da:	07 5a       	subi	r16, 0xA7	; 167
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	e5 5a       	subi	r30, 0xA5	; 165
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	f8 01       	movw	r30, r16
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
    21fa:	de 01       	movw	r26, r28
    21fc:	ab 5a       	subi	r26, 0xAB	; 171
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e7 5a       	subi	r30, 0xA7	; 167
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	8d 93       	st	X+, r24
    220c:	9c 93       	st	X, r25
    220e:	fe 01       	movw	r30, r28
    2210:	eb 5a       	subi	r30, 0xAB	; 171
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_displayCharacter+0x184>
    221c:	fe 01       	movw	r30, r28
    221e:	eb 5a       	subi	r30, 0xAB	; 171
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	62 e0       	ldi	r22, 0x02	; 2
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    2230:	fe 01       	movw	r30, r28
    2232:	ef 5a       	subi	r30, 0xAF	; 175
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e8       	ldi	r26, 0x80	; 128
    223c:	bf e3       	ldi	r27, 0x3F	; 63
    223e:	80 83       	st	Z, r24
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	a2 83       	std	Z+2, r26	; 0x02
    2244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	8e 01       	movw	r16, r28
    2248:	03 5b       	subi	r16, 0xB3	; 179
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	ef 5a       	subi	r30, 0xAF	; 175
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2274:	fe 01       	movw	r30, r28
    2276:	e3 5b       	subi	r30, 0xB3	; 179
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	44 f4       	brge	.+16     	; 0x22a2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2292:	fe 01       	movw	r30, r28
    2294:	e5 5b       	subi	r30, 0xB5	; 181
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	64 c0       	rjmp	.+200    	; 0x236a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22a2:	fe 01       	movw	r30, r28
    22a4:	e3 5b       	subi	r30, 0xB3	; 179
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <LCD_displayCharacter+0x22e>
    22c0:	43 c0       	rjmp	.+134    	; 0x2348 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 5a       	subi	r30, 0xAF	; 175
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8e 01       	movw	r16, r28
    22e2:	05 5b       	subi	r16, 0xB5	; 181
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	f8 01       	movw	r30, r16
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <LCD_displayCharacter+0x2a4>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e7 5b       	subi	r30, 0xB7	; 183
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	fe 01       	movw	r30, r28
    230a:	e7 5b       	subi	r30, 0xB7	; 183
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_displayCharacter+0x27e>
    2316:	fe 01       	movw	r30, r28
    2318:	e7 5b       	subi	r30, 0xB7	; 183
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	de 01       	movw	r26, r28
    2322:	a5 5b       	subi	r26, 0xB5	; 181
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e5 5b       	subi	r30, 0xB5	; 181
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	fe 01       	movw	r30, r28
    233a:	e5 5b       	subi	r30, 0xB5	; 181
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	d1 f6       	brne	.-76     	; 0x22fa <LCD_displayCharacter+0x266>
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	8e 01       	movw	r16, r28
    234a:	05 5b       	subi	r16, 0xB5	; 181
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	e3 5b       	subi	r30, 0xB3	; 179
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	f8 01       	movw	r30, r16
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
    236a:	de 01       	movw	r26, r28
    236c:	a9 5b       	subi	r26, 0xB9	; 185
    236e:	bf 4f       	sbci	r27, 0xFF	; 255
    2370:	fe 01       	movw	r30, r28
    2372:	e5 5b       	subi	r30, 0xB5	; 181
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	8d 93       	st	X+, r24
    237c:	9c 93       	st	X, r25
    237e:	fe 01       	movw	r30, r28
    2380:	e9 5b       	subi	r30, 0xB9	; 185
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_displayCharacter+0x2f4>
    238c:	fe 01       	movw	r30, r28
    238e:	e9 5b       	subi	r30, 0xB9	; 185
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_data, 4));
    2396:	fe 01       	movw	r30, r28
    2398:	ed 59       	subi	r30, 0x9D	; 157
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	80 71       	andi	r24, 0x10	; 16
    23a4:	90 70       	andi	r25, 0x00	; 0
    23a6:	95 95       	asr	r25
    23a8:	87 95       	ror	r24
    23aa:	95 95       	asr	r25
    23ac:	87 95       	ror	r24
    23ae:	95 95       	asr	r25
    23b0:	87 95       	ror	r24
    23b2:	95 95       	asr	r25
    23b4:	87 95       	ror	r24
    23b6:	98 2f       	mov	r25, r24
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	49 2f       	mov	r20, r25
    23be:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_data, 5));
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 59       	subi	r30, 0x9D	; 157
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	80 72       	andi	r24, 0x20	; 32
    23d0:	90 70       	andi	r25, 0x00	; 0
    23d2:	95 95       	asr	r25
    23d4:	87 95       	ror	r24
    23d6:	95 95       	asr	r25
    23d8:	87 95       	ror	r24
    23da:	95 95       	asr	r25
    23dc:	87 95       	ror	r24
    23de:	95 95       	asr	r25
    23e0:	87 95       	ror	r24
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	98 2f       	mov	r25, r24
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	64 e0       	ldi	r22, 0x04	; 4
    23ec:	49 2f       	mov	r20, r25
    23ee:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_data, 6));
    23f2:	fe 01       	movw	r30, r28
    23f4:	ed 59       	subi	r30, 0x9D	; 157
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	80 74       	andi	r24, 0x40	; 64
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	08 2e       	mov	r0, r24
    2404:	89 2f       	mov	r24, r25
    2406:	00 0c       	add	r0, r0
    2408:	88 1f       	adc	r24, r24
    240a:	99 0b       	sbc	r25, r25
    240c:	00 0c       	add	r0, r0
    240e:	88 1f       	adc	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	98 2f       	mov	r25, r24
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	65 e0       	ldi	r22, 0x05	; 5
    2418:	49 2f       	mov	r20, r25
    241a:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_data, 7));
    241e:	fe 01       	movw	r30, r28
    2420:	ed 59       	subi	r30, 0x9D	; 157
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	98 2f       	mov	r25, r24
    2428:	99 1f       	adc	r25, r25
    242a:	99 27       	eor	r25, r25
    242c:	99 1f       	adc	r25, r25
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	49 2f       	mov	r20, r25
    2434:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    2438:	fe 01       	movw	r30, r28
    243a:	ed 5b       	subi	r30, 0xBD	; 189
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	8e 01       	movw	r16, r28
    2450:	01 5c       	subi	r16, 0xC1	; 193
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	ed 5b       	subi	r30, 0xBD	; 189
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	ff 96       	adiw	r30, 0x3f	; 63
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e af       	std	Y+62, r25	; 0x3e
    249e:	8d af       	std	Y+61, r24	; 0x3d
    24a0:	46 c0       	rjmp	.+140    	; 0x252e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    24a2:	fe 01       	movw	r30, r28
    24a4:	ff 96       	adiw	r30, 0x3f	; 63
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	64 f5       	brge	.+88     	; 0x2516 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	fe 01       	movw	r30, r28
    24c0:	ed 5b       	subi	r30, 0xBD	; 189
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e af       	std	Y+62, r25	; 0x3e
    24ea:	8d af       	std	Y+61, r24	; 0x3d
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_displayCharacter+0x478>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c af       	std	Y+60, r25	; 0x3c
    24f4:	8b af       	std	Y+59, r24	; 0x3b
    24f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    24f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_displayCharacter+0x466>
    24fe:	9c af       	std	Y+60, r25	; 0x3c
    2500:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d ad       	ldd	r24, Y+61	; 0x3d
    2504:	9e ad       	ldd	r25, Y+62	; 0x3e
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e af       	std	Y+62, r25	; 0x3e
    250a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d ad       	ldd	r24, Y+61	; 0x3d
    250e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <LCD_displayCharacter+0x45a>
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	fe 01       	movw	r30, r28
    2518:	ff 96       	adiw	r30, 0x3f	; 63
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e af       	std	Y+62, r25	; 0x3e
    252c:	8d af       	std	Y+61, r24	; 0x3d
    252e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2530:	9e ad       	ldd	r25, Y+62	; 0x3e
    2532:	9a af       	std	Y+58, r25	; 0x3a
    2534:	89 af       	std	Y+57, r24	; 0x39
    2536:	89 ad       	ldd	r24, Y+57	; 0x39
    2538:	9a ad       	ldd	r25, Y+58	; 0x3a
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_displayCharacter+0x4a6>
    253e:	9a af       	std	Y+58, r25	; 0x3a
    2540:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	62 e0       	ldi	r22, 0x02	; 2
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	8d ab       	std	Y+53, r24	; 0x35
    2556:	9e ab       	std	Y+54, r25	; 0x36
    2558:	af ab       	std	Y+55, r26	; 0x37
    255a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6d a9       	ldd	r22, Y+53	; 0x35
    255e:	7e a9       	ldd	r23, Y+54	; 0x36
    2560:	8f a9       	ldd	r24, Y+55	; 0x37
    2562:	98 ad       	ldd	r25, Y+56	; 0x38
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	89 ab       	std	Y+49, r24	; 0x31
    2576:	9a ab       	std	Y+50, r25	; 0x32
    2578:	ab ab       	std	Y+51, r26	; 0x33
    257a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	98 ab       	std	Y+48, r25	; 0x30
    259a:	8f a7       	std	Y+47, r24	; 0x2f
    259c:	3f c0       	rjmp	.+126    	; 0x261c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    259e:	69 a9       	ldd	r22, Y+49	; 0x31
    25a0:	7a a9       	ldd	r23, Y+50	; 0x32
    25a2:	8b a9       	ldd	r24, Y+51	; 0x33
    25a4:	9c a9       	ldd	r25, Y+52	; 0x34
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6d a9       	ldd	r22, Y+53	; 0x35
    25b8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ba:	8f a9       	ldd	r24, Y+55	; 0x37
    25bc:	98 ad       	ldd	r25, Y+56	; 0x38
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	98 ab       	std	Y+48, r25	; 0x30
    25dc:	8f a7       	std	Y+47, r24	; 0x2f
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_displayCharacter+0x56a>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e a7       	std	Y+46, r25	; 0x2e
    25e6:	8d a7       	std	Y+45, r24	; 0x2d
    25e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_displayCharacter+0x558>
    25f0:	9e a7       	std	Y+46, r25	; 0x2e
    25f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f6:	98 a9       	ldd	r25, Y+48	; 0x30
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2600:	98 a9       	ldd	r25, Y+48	; 0x30
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <LCD_displayCharacter+0x54c>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	69 a9       	ldd	r22, Y+49	; 0x31
    260a:	7a a9       	ldd	r23, Y+50	; 0x32
    260c:	8b a9       	ldd	r24, Y+51	; 0x33
    260e:	9c a9       	ldd	r25, Y+52	; 0x34
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	9c a7       	std	Y+44, r25	; 0x2c
    2622:	8b a7       	std	Y+43, r24	; 0x2b
    2624:	8b a5       	ldd	r24, Y+43	; 0x2b
    2626:	9c a5       	ldd	r25, Y+44	; 0x2c
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_displayCharacter+0x594>
    262c:	9c a7       	std	Y+44, r25	; 0x2c
    262e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	62 e0       	ldi	r22, 0x02	; 2
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	8f a3       	std	Y+39, r24	; 0x27
    2644:	98 a7       	std	Y+40, r25	; 0x28
    2646:	a9 a7       	std	Y+41, r26	; 0x29
    2648:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	6f a1       	ldd	r22, Y+39	; 0x27
    264c:	78 a5       	ldd	r23, Y+40	; 0x28
    264e:	89 a5       	ldd	r24, Y+41	; 0x29
    2650:	9a a5       	ldd	r25, Y+42	; 0x2a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8b a3       	std	Y+35, r24	; 0x23
    2664:	9c a3       	std	Y+36, r25	; 0x24
    2666:	ad a3       	std	Y+37, r26	; 0x25
    2668:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    266a:	6b a1       	ldd	r22, Y+35	; 0x23
    266c:	7c a1       	ldd	r23, Y+36	; 0x24
    266e:	8d a1       	ldd	r24, Y+37	; 0x25
    2670:	9e a1       	ldd	r25, Y+38	; 0x26
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	3f c0       	rjmp	.+126    	; 0x270a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	6f a1       	ldd	r22, Y+39	; 0x27
    26a6:	78 a5       	ldd	r23, Y+40	; 0x28
    26a8:	89 a5       	ldd	r24, Y+41	; 0x29
    26aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_displayCharacter+0x658>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	98 a3       	std	Y+32, r25	; 0x20
    26d4:	8f 8f       	std	Y+31, r24	; 0x1f
    26d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26d8:	98 a1       	ldd	r25, Y+32	; 0x20
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_displayCharacter+0x646>
    26de:	98 a3       	std	Y+32, r25	; 0x20
    26e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9a a3       	std	Y+34, r25	; 0x22
    26ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	89 a1       	ldd	r24, Y+33	; 0x21
    26ee:	9a a1       	ldd	r25, Y+34	; 0x22
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_displayCharacter+0x63a>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6b a1       	ldd	r22, Y+35	; 0x23
    26f8:	7c a1       	ldd	r23, Y+36	; 0x24
    26fa:	8d a1       	ldd	r24, Y+37	; 0x25
    26fc:	9e a1       	ldd	r25, Y+38	; 0x26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	9e 8f       	std	Y+30, r25	; 0x1e
    2710:	8d 8f       	std	Y+29, r24	; 0x1d
    2712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2714:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_displayCharacter+0x682>
    271a:	9e 8f       	std	Y+30, r25	; 0x1e
    271c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(a_data, 0));
    271e:	fe 01       	movw	r30, r28
    2720:	ed 59       	subi	r30, 0x9D	; 157
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	98 2f       	mov	r25, r24
    2728:	91 70       	andi	r25, 0x01	; 1
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	63 e0       	ldi	r22, 0x03	; 3
    272e:	49 2f       	mov	r20, r25
    2730:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(a_data, 1));
    2734:	fe 01       	movw	r30, r28
    2736:	ed 59       	subi	r30, 0x9D	; 157
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 70       	andi	r24, 0x02	; 2
    2742:	90 70       	andi	r25, 0x00	; 0
    2744:	95 95       	asr	r25
    2746:	87 95       	ror	r24
    2748:	98 2f       	mov	r25, r24
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	49 2f       	mov	r20, r25
    2750:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(a_data, 2));
    2754:	fe 01       	movw	r30, r28
    2756:	ed 59       	subi	r30, 0x9D	; 157
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	84 70       	andi	r24, 0x04	; 4
    2762:	90 70       	andi	r25, 0x00	; 0
    2764:	95 95       	asr	r25
    2766:	87 95       	ror	r24
    2768:	95 95       	asr	r25
    276a:	87 95       	ror	r24
    276c:	98 2f       	mov	r25, r24
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	65 e0       	ldi	r22, 0x05	; 5
    2772:	49 2f       	mov	r20, r25
    2774:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(a_data, 3));
    2778:	fe 01       	movw	r30, r28
    277a:	ed 59       	subi	r30, 0x9D	; 157
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	88 70       	andi	r24, 0x08	; 8
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	95 95       	asr	r25
    278e:	87 95       	ror	r24
    2790:	95 95       	asr	r25
    2792:	87 95       	ror	r24
    2794:	98 2f       	mov	r25, r24
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	49 2f       	mov	r20, r25
    279c:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e8       	ldi	r26, 0x80	; 128
    27a6:	bf e3       	ldi	r27, 0x3F	; 63
    27a8:	89 8f       	std	Y+25, r24	; 0x19
    27aa:	9a 8f       	std	Y+26, r25	; 0x1a
    27ac:	ab 8f       	std	Y+27, r26	; 0x1b
    27ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a ef       	ldi	r20, 0xFA	; 250
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8d 8b       	std	Y+21, r24	; 0x15
    27ca:	9e 8b       	std	Y+22, r25	; 0x16
    27cc:	af 8b       	std	Y+23, r26	; 0x17
    27ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d0:	6d 89       	ldd	r22, Y+21	; 0x15
    27d2:	7e 89       	ldd	r23, Y+22	; 0x16
    27d4:	8f 89       	ldd	r24, Y+23	; 0x17
    27d6:	98 8d       	ldd	r25, Y+24	; 0x18
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	2c f4       	brge	.+10     	; 0x27f2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
    27f0:	3f c0       	rjmp	.+126    	; 0x2870 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	4c f5       	brge	.+82     	; 0x285c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	69 8d       	ldd	r22, Y+25	; 0x19
    280c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9c 8b       	std	Y+20, r25	; 0x14
    2830:	8b 8b       	std	Y+19, r24	; 0x13
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <LCD_displayCharacter+0x7be>
    2834:	88 ec       	ldi	r24, 0xC8	; 200
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9a 8b       	std	Y+18, r25	; 0x12
    283a:	89 8b       	std	Y+17, r24	; 0x11
    283c:	89 89       	ldd	r24, Y+17	; 0x11
    283e:	9a 89       	ldd	r25, Y+18	; 0x12
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0x7ac>
    2844:	9a 8b       	std	Y+18, r25	; 0x12
    2846:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f7       	brne	.-38     	; 0x2834 <LCD_displayCharacter+0x7a0>
    285a:	14 c0       	rjmp	.+40     	; 0x2884 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	6d 89       	ldd	r22, Y+21	; 0x15
    285e:	7e 89       	ldd	r23, Y+22	; 0x16
    2860:	8f 89       	ldd	r24, Y+23	; 0x17
    2862:	98 8d       	ldd	r25, Y+24	; 0x18
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
    2870:	8b 89       	ldd	r24, Y+19	; 0x13
    2872:	9c 89       	ldd	r25, Y+20	; 0x14
    2874:	98 8b       	std	Y+16, r25	; 0x10
    2876:	8f 87       	std	Y+15, r24	; 0x0f
    2878:	8f 85       	ldd	r24, Y+15	; 0x0f
    287a:	98 89       	ldd	r25, Y+16	; 0x10
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_displayCharacter+0x7e8>
    2880:	98 8b       	std	Y+16, r25	; 0x10
    2882:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	8b 87       	std	Y+11, r24	; 0x0b
    2898:	9c 87       	std	Y+12, r25	; 0x0c
    289a:	ad 87       	std	Y+13, r26	; 0x0d
    289c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8f 83       	std	Y+7, r24	; 0x07
    28b8:	98 87       	std	Y+8, r25	; 0x08
    28ba:	a9 87       	std	Y+9, r26	; 0x09
    28bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	3f c0       	rjmp	.+126    	; 0x295e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <LCD_displayCharacter+0x8ac>
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_displayCharacter+0x89a>
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <LCD_displayCharacter+0x88e>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_displayCharacter+0x8d6>
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, a_data);			   /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1);										   /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1);										   /* delay for processing Th = 13ns */
#endif
}
    2972:	cd 59       	subi	r28, 0x9D	; 157
    2974:	df 4f       	sbci	r29, 0xFF	; 255
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	00 d0       	rcall	.+0      	; 0x2990 <LCD_displayString+0x6>
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    299a:	19 82       	std	Y+1, r1	; 0x01
    299c:	0e c0       	rjmp	.+28     	; 0x29ba <LCD_displayString+0x30>
	while (a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	fc 01       	movw	r30, r24
    29aa:	e2 0f       	add	r30, r18
    29ac:	f3 1f       	adc	r31, r19
    29ae:	80 81       	ld	r24, Z
    29b0:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_displayCharacter>
		i++;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;
	while (a_str[i] != '\0')
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	fc 01       	movw	r30, r24
    29c6:	e2 0f       	add	r30, r18
    29c8:	f3 1f       	adc	r31, r19
    29ca:	80 81       	ld	r24, Z
    29cc:	88 23       	and	r24, r24
    29ce:	39 f7       	brne	.-50     	; 0x299e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 a_row, uint8 a_col)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <LCD_moveCursor+0x6>
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <LCD_moveCursor+0x8>
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	8a 83       	std	Y+2, r24	; 0x02
    29ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (a_row)
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	3d 83       	std	Y+5, r19	; 0x05
    29f6:	2c 83       	std	Y+4, r18	; 0x04
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	9d 81       	ldd	r25, Y+5	; 0x05
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	91 05       	cpc	r25, r1
    2a00:	c1 f0       	breq	.+48     	; 0x2a32 <LCD_moveCursor+0x56>
    2a02:	2c 81       	ldd	r18, Y+4	; 0x04
    2a04:	3d 81       	ldd	r19, Y+5	; 0x05
    2a06:	22 30       	cpi	r18, 0x02	; 2
    2a08:	31 05       	cpc	r19, r1
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <LCD_moveCursor+0x3a>
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	61 f0       	breq	.+24     	; 0x2a2c <LCD_moveCursor+0x50>
    2a14:	19 c0       	rjmp	.+50     	; 0x2a48 <LCD_moveCursor+0x6c>
    2a16:	2c 81       	ldd	r18, Y+4	; 0x04
    2a18:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1a:	22 30       	cpi	r18, 0x02	; 2
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	69 f0       	breq	.+26     	; 0x2a3a <LCD_moveCursor+0x5e>
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	91 05       	cpc	r25, r1
    2a28:	61 f0       	breq	.+24     	; 0x2a42 <LCD_moveCursor+0x66>
    2a2a:	0e c0       	rjmp	.+28     	; 0x2a48 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = a_col;
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	0b c0       	rjmp	.+22     	; 0x2a48 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = a_col + 0x40;
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	80 5c       	subi	r24, 0xC0	; 192
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	07 c0       	rjmp	.+14     	; 0x2a48 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = a_col + 0x10;
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	80 5f       	subi	r24, 0xF0	; 240
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = a_col + 0x50;
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	80 5b       	subi	r24, 0xB0	; 176
    2a46:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	80 68       	ori	r24, 0x80	; 128
    2a4c:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 a_row, uint8 col, const char *a_str)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <LCD_displayStringRowColumn+0x6>
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <LCD_displayStringRowColumn+0x8>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	6a 83       	std	Y+2, r22	; 0x02
    2a70:	5c 83       	std	Y+4, r21	; 0x04
    2a72:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row, col); /* go to to the required LCD position */
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	6a 81       	ldd	r22, Y+2	; 0x02
    2a78:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
	LCD_displayString(a_str); /* display the string */
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int a_data)
{
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	62 97       	sbiw	r28, 0x12	; 18
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(a_data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	9e 01       	movw	r18, r28
    2ab0:	2f 5f       	subi	r18, 0xFF	; 255
    2ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab4:	b9 01       	movw	r22, r18
    2ab6:	4a e0       	ldi	r20, 0x0A	; 10
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <itoa>
	LCD_displayString(buff); /* Display the string */
    2abe:	ce 01       	movw	r24, r28
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
}
    2ac6:	62 96       	adiw	r28, 0x12	; 18
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_sendCommand>
}
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	60 97       	sbiw	r28, 0x10	; 16
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	64 e0       	ldi	r22, 0x04	; 4
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	65 e0       	ldi	r22, 0x05	; 5
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	66 e0       	ldi	r22, 0x06	; 6
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	67 e0       	ldi	r22, 0x07	; 7
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	62 e0       	ldi	r22, 0x02	; 2
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	63 e0       	ldi	r22, 0x03	; 3
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	64 e0       	ldi	r22, 0x04	; 4
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	65 e0       	ldi	r22, 0x05	; 5
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2b50:	1f 86       	std	Y+15, r1	; 0x0f
    2b52:	b4 c0       	rjmp	.+360    	; 0x2cbc <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b56:	98 2f       	mov	r25, r24
    2b58:	9c 5f       	subi	r25, 0xFC	; 252
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	69 2f       	mov	r22, r25
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 2f       	mov	r25, r24
    2b68:	9c 5f       	subi	r25, 0xFC	; 252
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	69 2f       	mov	r22, r25
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 c4 08 	call	0x1188	; 0x1188 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2b74:	18 8a       	std	Y+16, r1	; 0x10
    2b76:	22 c0       	rjmp	.+68     	; 0x2bbc <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2b78:	88 89       	ldd	r24, Y+16	; 0x10
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	9e 5f       	subi	r25, 0xFE	; 254
    2b7e:	83 e0       	ldi	r24, 0x03	; 3
    2b80:	69 2f       	mov	r22, r25
    2b82:	0e 94 af 09 	call	0x135e	; 0x135e <GPIO_readPin>
    2b86:	88 23       	and	r24, r24
    2b88:	b1 f4       	brne	.+44     	; 0x2bb6 <KEYPAD_getPressedKey+0xca>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
#else
					return KEYPAD_4x4_adjustKeyNumber(
    2b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	98 2f       	mov	r25, r24
    2b9a:	88 89       	ldd	r24, Y+16	; 0x10
    2b9c:	89 0f       	add	r24, r25
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2ba4:	60 96       	adiw	r28, 0x10	; 16
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2bb6:	88 89       	ldd	r24, Y+16	; 0x10
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	88 8b       	std	Y+16, r24	; 0x10
    2bbc:	88 89       	ldd	r24, Y+16	; 0x10
    2bbe:	84 30       	cpi	r24, 0x04	; 4
    2bc0:	d8 f2       	brcs	.-74     	; 0x2b78 <KEYPAD_getPressedKey+0x8c>
							(row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc4:	98 2f       	mov	r25, r24
    2bc6:	9c 5f       	subi	r25, 0xFC	; 252
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	69 2f       	mov	r22, r25
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <GPIO_setupPinDirection>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 ea       	ldi	r26, 0xA0	; 160
    2bd8:	b0 e4       	ldi	r27, 0x40	; 64
    2bda:	8b 87       	std	Y+11, r24	; 0x0b
    2bdc:	9c 87       	std	Y+12, r25	; 0x0c
    2bde:	ad 87       	std	Y+13, r26	; 0x0d
    2be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8f 83       	std	Y+7, r24	; 0x07
    2bfc:	98 87       	std	Y+8, r25	; 0x08
    2bfe:	a9 87       	std	Y+9, r26	; 0x09
    2c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <KEYPAD_getPressedKey+0x198>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <KEYPAD_getPressedKey+0x186>
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <KEYPAD_getPressedKey+0x17a>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <KEYPAD_getPressedKey+0x1c2>
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb8:	8f 5f       	subi	r24, 0xFF	; 255
    2cba:	8f 87       	std	Y+15, r24	; 0x0f
    2cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cbe:	84 30       	cpi	r24, 0x04	; 4
    2cc0:	08 f4       	brcc	.+2      	; 0x2cc4 <KEYPAD_getPressedKey+0x1d8>
    2cc2:	48 cf       	rjmp	.-368    	; 0x2b54 <KEYPAD_getPressedKey+0x68>
    2cc4:	45 cf       	rjmp	.-374    	; 0x2b50 <KEYPAD_getPressedKey+0x64>

00002cc6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <KEYPAD_4x4_adjustKeyNumber+0x6>
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <KEYPAD_4x4_adjustKeyNumber+0x8>
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2cd4:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number)
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	3c 83       	std	Y+4, r19	; 0x04
    2cde:	2b 83       	std	Y+3, r18	; 0x03
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	88 30       	cpi	r24, 0x08	; 8
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <KEYPAD_4x4_adjustKeyNumber+0x26>
    2cea:	70 c0       	rjmp	.+224    	; 0x2dcc <KEYPAD_4x4_adjustKeyNumber+0x106>
    2cec:	2b 81       	ldd	r18, Y+3	; 0x03
    2cee:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf0:	29 30       	cpi	r18, 0x09	; 9
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	5c f5       	brge	.+86     	; 0x2d4c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	84 30       	cpi	r24, 0x04	; 4
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2d00:	59 c0       	rjmp	.+178    	; 0x2db4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2d02:	2b 81       	ldd	r18, Y+3	; 0x03
    2d04:	3c 81       	ldd	r19, Y+4	; 0x04
    2d06:	25 30       	cpi	r18, 0x05	; 5
    2d08:	31 05       	cpc	r19, r1
    2d0a:	9c f4       	brge	.+38     	; 0x2d32 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	91 05       	cpc	r25, r1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2d16:	48 c0       	rjmp	.+144    	; 0x2da8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2d18:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d1c:	23 30       	cpi	r18, 0x03	; 3
    2d1e:	31 05       	cpc	r19, r1
    2d20:	0c f0       	brlt	.+2      	; 0x2d24 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2d22:	45 c0       	rjmp	.+138    	; 0x2dae <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2d2e:	39 c0       	rjmp	.+114    	; 0x2da2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2d30:	67 c0       	rjmp	.+206    	; 0x2e00 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2d32:	2b 81       	ldd	r18, Y+3	; 0x03
    2d34:	3c 81       	ldd	r19, Y+4	; 0x04
    2d36:	26 30       	cpi	r18, 0x06	; 6
    2d38:	31 05       	cpc	r19, r1
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <KEYPAD_4x4_adjustKeyNumber+0x78>
    2d3c:	41 c0       	rjmp	.+130    	; 0x2dc0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	87 30       	cpi	r24, 0x07	; 7
    2d44:	91 05       	cpc	r25, r1
    2d46:	0c f0       	brlt	.+2      	; 0x2d4a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2d48:	3e c0       	rjmp	.+124    	; 0x2dc6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2d4a:	37 c0       	rjmp	.+110    	; 0x2dba <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d50:	2c 30       	cpi	r18, 0x0C	; 12
    2d52:	31 05       	cpc	r19, r1
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2d56:	46 c0       	rjmp	.+140    	; 0x2de4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	8d 30       	cpi	r24, 0x0D	; 13
    2d5e:	91 05       	cpc	r25, r1
    2d60:	5c f4       	brge	.+22     	; 0x2d78 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2d62:	2b 81       	ldd	r18, Y+3	; 0x03
    2d64:	3c 81       	ldd	r19, Y+4	; 0x04
    2d66:	2a 30       	cpi	r18, 0x0A	; 10
    2d68:	31 05       	cpc	r19, r1
    2d6a:	b1 f1       	breq	.+108    	; 0x2dd8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	8b 30       	cpi	r24, 0x0B	; 11
    2d72:	91 05       	cpc	r25, r1
    2d74:	a4 f5       	brge	.+104    	; 0x2dde <KEYPAD_4x4_adjustKeyNumber+0x118>
    2d76:	2d c0       	rjmp	.+90     	; 0x2dd2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2d78:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7c:	2e 30       	cpi	r18, 0x0E	; 14
    2d7e:	31 05       	cpc	r19, r1
    2d80:	b9 f1       	breq	.+110    	; 0x2df0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	8e 30       	cpi	r24, 0x0E	; 14
    2d88:	91 05       	cpc	r25, r1
    2d8a:	7c f1       	brlt	.+94     	; 0x2dea <KEYPAD_4x4_adjustKeyNumber+0x124>
    2d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d90:	2f 30       	cpi	r18, 0x0F	; 15
    2d92:	31 05       	cpc	r19, r1
    2d94:	79 f1       	breq	.+94     	; 0x2df4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	80 31       	cpi	r24, 0x10	; 16
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	69 f1       	breq	.+90     	; 0x2dfa <KEYPAD_4x4_adjustKeyNumber+0x134>
    2da0:	2f c0       	rjmp	.+94     	; 0x2e00 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	2e c0       	rjmp	.+92     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 2;
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	2b c0       	rjmp	.+86     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 3;
    2dae:	83 e0       	ldi	r24, 0x03	; 3
    2db0:	89 83       	std	Y+1, r24	; 0x01
    2db2:	28 c0       	rjmp	.+80     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '^';
    2db4:	8e e5       	ldi	r24, 0x5E	; 94
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	25 c0       	rjmp	.+74     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2dba:	84 e0       	ldi	r24, 0x04	; 4
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	22 c0       	rjmp	.+68     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    2dc0:	85 e0       	ldi	r24, 0x05	; 5
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	1f c0       	rjmp	.+62     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    2dc6:	86 e0       	ldi	r24, 0x06	; 6
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	1c c0       	rjmp	.+56     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '^';
    2dcc:	8e e5       	ldi	r24, 0x5E	; 94
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	19 c0       	rjmp	.+50     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 7;
    2dd2:	87 e0       	ldi	r24, 0x07	; 7
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	16 c0       	rjmp	.+44     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 8;
    2dd8:	88 e0       	ldi	r24, 0x08	; 8
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	13 c0       	rjmp	.+38     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 9;
    2dde:	89 e0       	ldi	r24, 0x09	; 9
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	10 c0       	rjmp	.+32     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '^';
    2de4:	8e e5       	ldi	r24, 0x5E	; 94
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	0d c0       	rjmp	.+26     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = '-';
    2dea:	8d e2       	ldi	r24, 0x2D	; 45
    2dec:	89 83       	std	Y+1, r24	; 0x01
    2dee:	0a c0       	rjmp	.+20     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2df0:	19 82       	std	Y+1, r1	; 0x01
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '+';
    2df4:	8b e2       	ldi	r24, 0x2B	; 43
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '#';
    2dfa:	83 e2       	ldi	r24, 0x23	; 35
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <main>:
 * Function output: void.
 */
void countOneSecond(void);

int main(void)
{
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	ca 56       	subi	r28, 0x6A	; 106
    2e22:	d0 40       	sbci	r29, 0x00	; 0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
	/* Configuration and initialization functions */
	/* enable global interrupt */
	SREG_REG.Bits.I_Bit = 1;
    2e2e:	ef e5       	ldi	r30, 0x5F	; 95
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	80 68       	ori	r24, 0x80	; 128
    2e36:	80 83       	st	Z, r24
	uint8 temp, try, passwordIsCreated, passwordIsChanged;
	uint8 password[5];
	/* select the configuration of UART */
	UART_ConfigType UART_config =
	{ ASYNCHRONOUS, DISABLED_PARITY, STOP_1_BIT, DATA_8_BIT, BAUD_RATE_9600 };
    2e38:	ce 01       	movw	r24, r28
    2e3a:	82 5a       	subi	r24, 0xA2	; 162
    2e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3e:	a8 96       	adiw	r28, 0x28	; 40
    2e40:	9f af       	std	Y+63, r25	; 0x3f
    2e42:	8e af       	std	Y+62, r24	; 0x3e
    2e44:	a8 97       	sbiw	r28, 0x28	; 40
    2e46:	82 ec       	ldi	r24, 0xC2	; 194
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	aa 96       	adiw	r28, 0x2a	; 42
    2e4c:	9f af       	std	Y+63, r25	; 0x3f
    2e4e:	8e af       	std	Y+62, r24	; 0x3e
    2e50:	aa 97       	sbiw	r28, 0x2a	; 42
    2e52:	98 e0       	ldi	r25, 0x08	; 8
    2e54:	ab 96       	adiw	r28, 0x2b	; 43
    2e56:	9f af       	std	Y+63, r25	; 0x3f
    2e58:	ab 97       	sbiw	r28, 0x2b	; 43
    2e5a:	aa 96       	adiw	r28, 0x2a	; 42
    2e5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e60:	aa 97       	sbiw	r28, 0x2a	; 42
    2e62:	00 80       	ld	r0, Z
    2e64:	aa 96       	adiw	r28, 0x2a	; 42
    2e66:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e68:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e6a:	aa 97       	sbiw	r28, 0x2a	; 42
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	aa 96       	adiw	r28, 0x2a	; 42
    2e70:	9f af       	std	Y+63, r25	; 0x3f
    2e72:	8e af       	std	Y+62, r24	; 0x3e
    2e74:	aa 97       	sbiw	r28, 0x2a	; 42
    2e76:	a8 96       	adiw	r28, 0x28	; 40
    2e78:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e7c:	a8 97       	sbiw	r28, 0x28	; 40
    2e7e:	00 82       	st	Z, r0
    2e80:	a8 96       	adiw	r28, 0x28	; 40
    2e82:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e86:	a8 97       	sbiw	r28, 0x28	; 40
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	a8 96       	adiw	r28, 0x28	; 40
    2e8c:	9f af       	std	Y+63, r25	; 0x3f
    2e8e:	8e af       	std	Y+62, r24	; 0x3e
    2e90:	a8 97       	sbiw	r28, 0x28	; 40
    2e92:	ab 96       	adiw	r28, 0x2b	; 43
    2e94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e96:	ab 97       	sbiw	r28, 0x2b	; 43
    2e98:	91 50       	subi	r25, 0x01	; 1
    2e9a:	ab 96       	adiw	r28, 0x2b	; 43
    2e9c:	9f af       	std	Y+63, r25	; 0x3f
    2e9e:	ab 97       	sbiw	r28, 0x2b	; 43
    2ea0:	ab 96       	adiw	r28, 0x2b	; 43
    2ea2:	ef ad       	ldd	r30, Y+63	; 0x3f
    2ea4:	ab 97       	sbiw	r28, 0x2b	; 43
    2ea6:	ee 23       	and	r30, r30
    2ea8:	c1 f6       	brne	.-80     	; 0x2e5a <main+0x46>

	/* passing the configuration to initialization function of UART */
	UART_init(&UART_config);
    2eaa:	ce 01       	movw	r24, r28
    2eac:	82 5a       	subi	r24, 0xA2	; 162
    2eae:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb0:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	/* call the initialization function of LCD */
	LCD_init();
    2eb4:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_init>

	LCD_clearScreen();
    2eb8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
	LCD_displayString("  Final Project ");
    2ebc:	80 e6       	ldi	r24, 0x60	; 96
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
	LCD_moveCursor(1, 0);
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
	LCD_displayString("Edges Diploma 79");
    2ecc:	81 e7       	ldi	r24, 0x71	; 113
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ef 5a       	subi	r30, 0xAF	; 175
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	aa e7       	ldi	r26, 0x7A	; 122
    2ee0:	b3 e4       	ldi	r27, 0x43	; 67
    2ee2:	80 83       	st	Z, r24
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	a2 83       	std	Z+2, r26	; 0x02
    2ee8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	8e 01       	movw	r16, r28
    2eec:	03 5b       	subi	r16, 0xB3	; 179
    2eee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ef 5a       	subi	r30, 0xAF	; 175
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	93 81       	ldd	r25, Z+3	; 0x03
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	4a ef       	ldi	r20, 0xFA	; 250
    2f04:	54 e4       	ldi	r21, 0x44	; 68
    2f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	f8 01       	movw	r30, r16
    2f10:	80 83       	st	Z, r24
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	a2 83       	std	Z+2, r26	; 0x02
    2f16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e3 5b       	subi	r30, 0xB3	; 179
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	60 81       	ld	r22, Z
    2f20:	71 81       	ldd	r23, Z+1	; 0x01
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e8       	ldi	r20, 0x80	; 128
    2f2c:	5f e3       	ldi	r21, 0x3F	; 63
    2f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	44 f4       	brge	.+16     	; 0x2f46 <main+0x132>
		__ticks = 1;
    2f36:	fe 01       	movw	r30, r28
    2f38:	e5 5b       	subi	r30, 0xB5	; 181
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	80 83       	st	Z, r24
    2f44:	64 c0       	rjmp	.+200    	; 0x300e <main+0x1fa>
	else if (__tmp > 65535)
    2f46:	fe 01       	movw	r30, r28
    2f48:	e3 5b       	subi	r30, 0xB3	; 179
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	0c f0       	brlt	.+2      	; 0x2f66 <main+0x152>
    2f64:	43 c0       	rjmp	.+134    	; 0x2fec <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	fe 01       	movw	r30, r28
    2f68:	ef 5a       	subi	r30, 0xAF	; 175
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e2       	ldi	r20, 0x20	; 32
    2f7a:	51 e4       	ldi	r21, 0x41	; 65
    2f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8e 01       	movw	r16, r28
    2f86:	05 5b       	subi	r16, 0xB5	; 181
    2f88:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	f8 01       	movw	r30, r16
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
    2f9c:	1f c0       	rjmp	.+62     	; 0x2fdc <main+0x1c8>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e7 5b       	subi	r30, 0xB7	; 183
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	80 83       	st	Z, r24
    2fac:	fe 01       	movw	r30, r28
    2fae:	e7 5b       	subi	r30, 0xB7	; 183
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 81       	ld	r24, Z
    2fb4:	91 81       	ldd	r25, Z+1	; 0x01
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <main+0x1a2>
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e7 5b       	subi	r30, 0xB7	; 183
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc4:	de 01       	movw	r26, r28
    2fc6:	a5 5b       	subi	r26, 0xB5	; 181
    2fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e5 5b       	subi	r30, 0xB5	; 181
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	11 96       	adiw	r26, 0x01	; 1
    2fd8:	9c 93       	st	X, r25
    2fda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e5 5b       	subi	r30, 0xB5	; 181
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	d1 f6       	brne	.-76     	; 0x2f9e <main+0x18a>
    2fea:	27 c0       	rjmp	.+78     	; 0x303a <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	8e 01       	movw	r16, r28
    2fee:	05 5b       	subi	r16, 0xB5	; 181
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	e3 5b       	subi	r30, 0xB3	; 179
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	f8 01       	movw	r30, r16
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	de 01       	movw	r26, r28
    3010:	a9 5b       	subi	r26, 0xB9	; 185
    3012:	bf 4f       	sbci	r27, 0xFF	; 255
    3014:	fe 01       	movw	r30, r28
    3016:	e5 5b       	subi	r30, 0xB5	; 181
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	8d 93       	st	X+, r24
    3020:	9c 93       	st	X, r25
    3022:	fe 01       	movw	r30, r28
    3024:	e9 5b       	subi	r30, 0xB9	; 185
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <main+0x218>
    3030:	fe 01       	movw	r30, r28
    3032:	e9 5b       	subi	r30, 0xB9	; 185
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
	_delay_ms(250);
	LCD_clearScreen();
    303a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
	LCD_displayString("     Made By    ");
    303e:	82 e8       	ldi	r24, 0x82	; 130
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
	LCD_moveCursor(1, 0);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
	LCD_displayString("    Ahmed Ali   ");
    304e:	83 e9       	ldi	r24, 0x93	; 147
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    3056:	fe 01       	movw	r30, r28
    3058:	ed 5b       	subi	r30, 0xBD	; 189
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	aa e7       	ldi	r26, 0x7A	; 122
    3062:	b3 e4       	ldi	r27, 0x43	; 67
    3064:	80 83       	st	Z, r24
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	8e 01       	movw	r16, r28
    306e:	01 5c       	subi	r16, 0xC1	; 193
    3070:	1f 4f       	sbci	r17, 0xFF	; 255
    3072:	fe 01       	movw	r30, r28
    3074:	ed 5b       	subi	r30, 0xBD	; 189
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	f8 01       	movw	r30, r16
    3092:	80 83       	st	Z, r24
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	a2 83       	std	Z+2, r26	; 0x02
    3098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    309a:	fe 01       	movw	r30, r28
    309c:	ff 96       	adiw	r30, 0x3f	; 63
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	2c f4       	brge	.+10     	; 0x30c0 <main+0x2ac>
		__ticks = 1;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9e af       	std	Y+62, r25	; 0x3e
    30bc:	8d af       	std	Y+61, r24	; 0x3d
    30be:	46 c0       	rjmp	.+140    	; 0x314c <main+0x338>
	else if (__tmp > 65535)
    30c0:	fe 01       	movw	r30, r28
    30c2:	ff 96       	adiw	r30, 0x3f	; 63
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	3f ef       	ldi	r19, 0xFF	; 255
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	57 e4       	ldi	r21, 0x47	; 71
    30d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d8:	18 16       	cp	r1, r24
    30da:	64 f5       	brge	.+88     	; 0x3134 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30dc:	fe 01       	movw	r30, r28
    30de:	ed 5b       	subi	r30, 0xBD	; 189
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9e af       	std	Y+62, r25	; 0x3e
    3108:	8d af       	std	Y+61, r24	; 0x3d
    310a:	0f c0       	rjmp	.+30     	; 0x312a <main+0x316>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9c af       	std	Y+60, r25	; 0x3c
    3112:	8b af       	std	Y+59, r24	; 0x3b
    3114:	8b ad       	ldd	r24, Y+59	; 0x3b
    3116:	9c ad       	ldd	r25, Y+60	; 0x3c
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <main+0x304>
    311c:	9c af       	std	Y+60, r25	; 0x3c
    311e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8d ad       	ldd	r24, Y+61	; 0x3d
    3122:	9e ad       	ldd	r25, Y+62	; 0x3e
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9e af       	std	Y+62, r25	; 0x3e
    3128:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8d ad       	ldd	r24, Y+61	; 0x3d
    312c:	9e ad       	ldd	r25, Y+62	; 0x3e
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <main+0x2f8>
    3132:	16 c0       	rjmp	.+44     	; 0x3160 <main+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	fe 01       	movw	r30, r28
    3136:	ff 96       	adiw	r30, 0x3f	; 63
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9e af       	std	Y+62, r25	; 0x3e
    314a:	8d af       	std	Y+61, r24	; 0x3d
    314c:	8d ad       	ldd	r24, Y+61	; 0x3d
    314e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3150:	9a af       	std	Y+58, r25	; 0x3a
    3152:	89 af       	std	Y+57, r24	; 0x39
    3154:	89 ad       	ldd	r24, Y+57	; 0x39
    3156:	9a ad       	ldd	r25, Y+58	; 0x3a
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <main+0x344>
    315c:	9a af       	std	Y+58, r25	; 0x3a
    315e:	89 af       	std	Y+57, r24	; 0x39
		/*
		 * select the action of create password at the start of program.
		 * the byte which sent to control ECU tell him to be ready to receive password
		 * after check matching here.
		 */
		UART_sendByte(CRETAE_PASSWORD_ACTION);
    3160:	8c ec       	ldi	r24, 0xCC	; 204
    3162:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
		/* at first we don't create any password */
		passwordIsCreated = FALSE;
    3166:	fe 01       	movw	r30, r28
    3168:	ea 5a       	subi	r30, 0xAA	; 170
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	10 82       	st	Z, r1
    316e:	06 c0       	rjmp	.+12     	; 0x317c <main+0x368>
		/* loop until the password is created and saved successfully to EEPROM */
		while (passwordIsCreated == FALSE)
		{
			passwordIsCreated = createPassword();
    3170:	0e 94 b9 1b 	call	0x3772	; 0x3772 <createPassword>
    3174:	fe 01       	movw	r30, r28
    3176:	ea 5a       	subi	r30, 0xAA	; 170
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	80 83       	st	Z, r24
		 */
		UART_sendByte(CRETAE_PASSWORD_ACTION);
		/* at first we don't create any password */
		passwordIsCreated = FALSE;
		/* loop until the password is created and saved successfully to EEPROM */
		while (passwordIsCreated == FALSE)
    317c:	fe 01       	movw	r30, r28
    317e:	ea 5a       	subi	r30, 0xAA	; 170
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	88 23       	and	r24, r24
    3186:	a1 f3       	breq	.-24     	; 0x3170 <main+0x35c>
		}

		/* the main menu of program which contain open door and change password options */
		while (1)
		{
			LCD_clearScreen();
    3188:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    318c:	84 ea       	ldi	r24, 0xA4	; 164
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
			LCD_moveCursor(1, 0);
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    319c:	82 eb       	ldi	r24, 0xB2	; 178
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
			/* get the option from user using keypad */
			temp = KEYPAD_getPressedKey();
    31a4:	0e 94 76 15 	call	0x2aec	; 0x2aec <KEYPAD_getPressedKey>
    31a8:	fe 01       	movw	r30, r28
    31aa:	e8 5a       	subi	r30, 0xA8	; 168
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 83       	st	Z, r24
			/* if choosing first option => open door */
			if (temp == '+')
    31b0:	fe 01       	movw	r30, r28
    31b2:	e8 5a       	subi	r30, 0xA8	; 168
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	8b 32       	cpi	r24, 0x2B	; 43
    31ba:	09 f0       	breq	.+2      	; 0x31be <main+0x3aa>
    31bc:	f7 c0       	rjmp	.+494    	; 0x33ac <main+0x598>
			{
				/* variable which count the number of tries for user for enter password */
				try = 0;
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5a       	subi	r30, 0xA9	; 169
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	10 82       	st	Z, r1
				/*
				 * select the action of check password.
				 * the byte which sent to control ECU tell him to be ready to check
				 * the received password with the password in EEPROM.
				 */
				UART_sendByte(CHECK_PASSWORD_ACTION);
    31c6:	8d ed       	ldi	r24, 0xDD	; 221
    31c8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
				/*
				 * select the mode of open door.
				 * the byte which sent to control ECU tell him to be ready for
				 * open door mode.
				 */
				UART_sendByte(OPEN_DOOR_MODE);
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
				while (1)
				{
					LCD_clearScreen();
    31d2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    31d6:	82 ec       	ldi	r24, 0xC2	; 194
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
					LCD_moveCursor(1, 0);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
					/* take the password from user using keypad */
					getPasswordFromKeyPad(password);
    31e6:	ce 01       	movw	r24, r28
    31e8:	87 5a       	subi	r24, 0xA7	; 167
    31ea:	9f 4f       	sbci	r25, 0xFF	; 255
    31ec:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <getPasswordFromKeyPad>
					/* send the password to control ECU to check if correct or not */
					sendPasswordToControlECU(password);
    31f0:	ce 01       	movw	r24, r28
    31f2:	87 5a       	subi	r24, 0xA7	; 167
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <sendPasswordToControlECU>
					/* the control ECU will replay with a byte which indicate if password correct or not */
					if (UART_recieveByte() == PASSWORD_CORRECT)
    31fa:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_recieveByte>
    31fe:	8a 3a       	cpi	r24, 0xAA	; 170
    3200:	51 f5       	brne	.+84     	; 0x3256 <main+0x442>
					{
						/* the password is correct, then start open door mode */
						LCD_clearScreen();
    3202:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("    Door is     ");
    3206:	82 ed       	ldi	r24, 0xD2	; 210
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						LCD_moveCursor(1, 0);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
						LCD_displayString("   Unlocking    ");
    3216:	83 ee       	ldi	r24, 0xE3	; 227
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						/* waiting for 15 seconds until the door is unlocking */
						timer1DelaySecond(DOOR_UNLOKING_PERIOD);
    321e:	8f e0       	ldi	r24, 0x0F	; 15
    3220:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <timer1DelaySecond>
						/* waiting for 3 seconds the hold period of the door */
						timer1DelaySecond(DOOR_HOLD_PERIOD);
    3224:	83 e0       	ldi	r24, 0x03	; 3
    3226:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <timer1DelaySecond>
						LCD_clearScreen();
    322a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("    Door is     ");
    322e:	82 ed       	ldi	r24, 0xD2	; 210
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						LCD_moveCursor(1, 0);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
						LCD_displayString("    locking     ");
    323e:	84 ef       	ldi	r24, 0xF4	; 244
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						/* waiting for 15 seconds until the door is locking */
						timer1DelaySecond(DOOR_LOKING_PERIOD);
    3246:	8f e0       	ldi	r24, 0x0F	; 15
    3248:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <timer1DelaySecond>
						/* reset the tries variable */
						try = 0;
    324c:	fe 01       	movw	r30, r28
    324e:	e9 5a       	subi	r30, 0xA9	; 169
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	10 82       	st	Z, r1
    3254:	99 cf       	rjmp	.-206    	; 0x3188 <main+0x374>
						break;
					}
					else
					{
						LCD_clearScreen();
    3256:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    325a:	85 e0       	ldi	r24, 0x05	; 5
    325c:	91 e0       	ldi	r25, 0x01	; 1
    325e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	aa e7       	ldi	r26, 0x7A	; 122
    3268:	b3 e4       	ldi	r27, 0x43	; 67
    326a:	8d ab       	std	Y+53, r24	; 0x35
    326c:	9e ab       	std	Y+54, r25	; 0x36
    326e:	af ab       	std	Y+55, r26	; 0x37
    3270:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	6d a9       	ldd	r22, Y+53	; 0x35
    3274:	7e a9       	ldd	r23, Y+54	; 0x36
    3276:	8f a9       	ldd	r24, Y+55	; 0x37
    3278:	98 ad       	ldd	r25, Y+56	; 0x38
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a ef       	ldi	r20, 0xFA	; 250
    3280:	54 e4       	ldi	r21, 0x44	; 68
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	89 ab       	std	Y+49, r24	; 0x31
    328c:	9a ab       	std	Y+50, r25	; 0x32
    328e:	ab ab       	std	Y+51, r26	; 0x33
    3290:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3292:	69 a9       	ldd	r22, Y+49	; 0x31
    3294:	7a a9       	ldd	r23, Y+50	; 0x32
    3296:	8b a9       	ldd	r24, Y+51	; 0x33
    3298:	9c a9       	ldd	r25, Y+52	; 0x34
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a6:	88 23       	and	r24, r24
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <main+0x4a0>
		__ticks = 1;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	98 ab       	std	Y+48, r25	; 0x30
    32b0:	8f a7       	std	Y+47, r24	; 0x2f
    32b2:	3f c0       	rjmp	.+126    	; 0x3332 <main+0x51e>
	else if (__tmp > 65535)
    32b4:	69 a9       	ldd	r22, Y+49	; 0x31
    32b6:	7a a9       	ldd	r23, Y+50	; 0x32
    32b8:	8b a9       	ldd	r24, Y+51	; 0x33
    32ba:	9c a9       	ldd	r25, Y+52	; 0x34
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	4c f5       	brge	.+82     	; 0x331e <main+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	6d a9       	ldd	r22, Y+53	; 0x35
    32ce:	7e a9       	ldd	r23, Y+54	; 0x36
    32d0:	8f a9       	ldd	r24, Y+55	; 0x37
    32d2:	98 ad       	ldd	r25, Y+56	; 0x38
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <main+0x500>
    32f6:	88 ec       	ldi	r24, 0xC8	; 200
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9e a7       	std	Y+46, r25	; 0x2e
    32fc:	8d a7       	std	Y+45, r24	; 0x2d
    32fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3300:	9e a5       	ldd	r25, Y+46	; 0x2e
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <main+0x4ee>
    3306:	9e a7       	std	Y+46, r25	; 0x2e
    3308:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330a:	8f a5       	ldd	r24, Y+47	; 0x2f
    330c:	98 a9       	ldd	r25, Y+48	; 0x30
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	98 ab       	std	Y+48, r25	; 0x30
    3312:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3314:	8f a5       	ldd	r24, Y+47	; 0x2f
    3316:	98 a9       	ldd	r25, Y+48	; 0x30
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	69 f7       	brne	.-38     	; 0x32f6 <main+0x4e2>
    331c:	14 c0       	rjmp	.+40     	; 0x3346 <main+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	69 a9       	ldd	r22, Y+49	; 0x31
    3320:	7a a9       	ldd	r23, Y+50	; 0x32
    3322:	8b a9       	ldd	r24, Y+51	; 0x33
    3324:	9c a9       	ldd	r25, Y+52	; 0x34
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	98 ab       	std	Y+48, r25	; 0x30
    3330:	8f a7       	std	Y+47, r24	; 0x2f
    3332:	8f a5       	ldd	r24, Y+47	; 0x2f
    3334:	98 a9       	ldd	r25, Y+48	; 0x30
    3336:	9c a7       	std	Y+44, r25	; 0x2c
    3338:	8b a7       	std	Y+43, r24	; 0x2b
    333a:	8b a5       	ldd	r24, Y+43	; 0x2b
    333c:	9c a5       	ldd	r25, Y+44	; 0x2c
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <main+0x52a>
    3342:	9c a7       	std	Y+44, r25	; 0x2c
    3344:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(250);
						/* each time the entered password is incorrect, the try variable increment by 1 */
						try++;
    3346:	de 01       	movw	r26, r28
    3348:	a9 5a       	subi	r26, 0xA9	; 169
    334a:	bf 4f       	sbci	r27, 0xFF	; 255
    334c:	fe 01       	movw	r30, r28
    334e:	e9 5a       	subi	r30, 0xA9	; 169
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	8c 93       	st	X, r24
						/* if the tries reach to 3, send to control ECU to enable the buzzer */
						if (try == NUMBER_OF_TRIES_FOR_PASSWORD)
    3358:	fe 01       	movw	r30, r28
    335a:	e9 5a       	subi	r30, 0xA9	; 169
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	80 81       	ld	r24, Z
    3360:	83 30       	cpi	r24, 0x03	; 3
    3362:	21 f4       	brne	.+8      	; 0x336c <main+0x558>
						{
							UART_sendByte(BUZZER_ON);
    3364:	88 e6       	ldi	r24, 0x68	; 104
    3366:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
    336a:	03 c0       	rjmp	.+6      	; 0x3372 <main+0x55e>
						}
						else
						{
							UART_sendByte(BUZZER_OFF);
    336c:	89 e6       	ldi	r24, 0x69	; 105
    336e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
						}
					}
					/* if the tries reach to 3, display error massage on LCD */
					if (try == NUMBER_OF_TRIES_FOR_PASSWORD)
    3372:	fe 01       	movw	r30, r28
    3374:	e9 5a       	subi	r30, 0xA9	; 169
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	83 30       	cpi	r24, 0x03	; 3
    337c:	09 f0       	breq	.+2      	; 0x3380 <main+0x56c>
    337e:	29 cf       	rjmp	.-430    	; 0x31d2 <main+0x3be>
					{
						LCD_clearScreen();
    3380:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("     ERROR      ");
    3384:	84 e1       	ldi	r24, 0x14	; 20
    3386:	91 e0       	ldi	r25, 0x01	; 1
    3388:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						LCD_moveCursor(1, 0);
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
						LCD_displayString(" WRONG 3 TRIES  ");
    3394:	85 e2       	ldi	r24, 0x25	; 37
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						/* waiting for 1 minute for the */
						timer1DelaySecond(BUZZER_ACTIVE_PERIOD);
    339c:	8c e3       	ldi	r24, 0x3C	; 60
    339e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <timer1DelaySecond>
						/* reset the tries variable */
						try = 0;
    33a2:	fe 01       	movw	r30, r28
    33a4:	e9 5a       	subi	r30, 0xA9	; 169
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	10 82       	st	Z, r1
    33aa:	ee ce       	rjmp	.-548    	; 0x3188 <main+0x374>
						break;
					}
				}
			}
			/* if choosing second option => change password */
			else if (temp == '-')
    33ac:	fe 01       	movw	r30, r28
    33ae:	e8 5a       	subi	r30, 0xA8	; 168
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	8d 32       	cpi	r24, 0x2D	; 45
    33b6:	09 f0       	breq	.+2      	; 0x33ba <main+0x5a6>
    33b8:	e7 ce       	rjmp	.-562    	; 0x3188 <main+0x374>
			{
				/* variable which count the number of tries for user for enter password */
				try = 0;
    33ba:	fe 01       	movw	r30, r28
    33bc:	e9 5a       	subi	r30, 0xA9	; 169
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	10 82       	st	Z, r1
				/*
				 * select the action of check password.
				 * the byte which sent to control ECU tell him to be ready to check
				 * the received password with the password in EEPROM.
				 */
				UART_sendByte(CHECK_PASSWORD_ACTION);
    33c2:	8d ed       	ldi	r24, 0xDD	; 221
    33c4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
				/*
				 * select the mode of open door.
				 * the byte which sent to control ECU tell him to be ready for
				 * change password mode.
				 */
				UART_sendByte(CHANGE_PASSWORD_MODE);
    33c8:	8e ee       	ldi	r24, 0xEE	; 238
    33ca:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
				while (1)
				{
					LCD_clearScreen();
    33ce:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    33d2:	82 ec       	ldi	r24, 0xC2	; 194
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
					LCD_moveCursor(1, 0);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
					/* take the password from user using keypad */
					getPasswordFromKeyPad(password);
    33e2:	ce 01       	movw	r24, r28
    33e4:	87 5a       	subi	r24, 0xA7	; 167
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <getPasswordFromKeyPad>
					/* send the password to control ECU to check if correct or not */
					sendPasswordToControlECU(password);
    33ec:	ce 01       	movw	r24, r28
    33ee:	87 5a       	subi	r24, 0xA7	; 167
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <sendPasswordToControlECU>
					/* the control ECU will replay with a byte which indicate if password correct or not */
					if (UART_recieveByte() == PASSWORD_CORRECT)
    33f6:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_recieveByte>
    33fa:	8a 3a       	cpi	r24, 0xAA	; 170
    33fc:	09 f0       	breq	.+2      	; 0x3400 <main+0x5ec>
    33fe:	0e c1       	rjmp	.+540    	; 0x361c <main+0x808>
					{
						LCD_clearScreen();
    3400:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("Correct Password");
    3404:	86 e3       	ldi	r24, 0x36	; 54
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	aa e7       	ldi	r26, 0x7A	; 122
    3412:	b3 e4       	ldi	r27, 0x43	; 67
    3414:	8f a3       	std	Y+39, r24	; 0x27
    3416:	98 a7       	std	Y+40, r25	; 0x28
    3418:	a9 a7       	std	Y+41, r26	; 0x29
    341a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341c:	6f a1       	ldd	r22, Y+39	; 0x27
    341e:	78 a5       	ldd	r23, Y+40	; 0x28
    3420:	89 a5       	ldd	r24, Y+41	; 0x29
    3422:	9a a5       	ldd	r25, Y+42	; 0x2a
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a ef       	ldi	r20, 0xFA	; 250
    342a:	54 e4       	ldi	r21, 0x44	; 68
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	8b a3       	std	Y+35, r24	; 0x23
    3436:	9c a3       	std	Y+36, r25	; 0x24
    3438:	ad a3       	std	Y+37, r26	; 0x25
    343a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    343c:	6b a1       	ldd	r22, Y+35	; 0x23
    343e:	7c a1       	ldd	r23, Y+36	; 0x24
    3440:	8d a1       	ldd	r24, Y+37	; 0x25
    3442:	9e a1       	ldd	r25, Y+38	; 0x26
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	2c f4       	brge	.+10     	; 0x345e <main+0x64a>
		__ticks = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9a a3       	std	Y+34, r25	; 0x22
    345a:	89 a3       	std	Y+33, r24	; 0x21
    345c:	3f c0       	rjmp	.+126    	; 0x34dc <main+0x6c8>
	else if (__tmp > 65535)
    345e:	6b a1       	ldd	r22, Y+35	; 0x23
    3460:	7c a1       	ldd	r23, Y+36	; 0x24
    3462:	8d a1       	ldd	r24, Y+37	; 0x25
    3464:	9e a1       	ldd	r25, Y+38	; 0x26
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	3f ef       	ldi	r19, 0xFF	; 255
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	57 e4       	ldi	r21, 0x47	; 71
    346e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	4c f5       	brge	.+82     	; 0x34c8 <main+0x6b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3476:	6f a1       	ldd	r22, Y+39	; 0x27
    3478:	78 a5       	ldd	r23, Y+40	; 0x28
    347a:	89 a5       	ldd	r24, Y+41	; 0x29
    347c:	9a a5       	ldd	r25, Y+42	; 0x2a
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e2       	ldi	r20, 0x20	; 32
    3484:	51 e4       	ldi	r21, 0x41	; 65
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9a a3       	std	Y+34, r25	; 0x22
    349c:	89 a3       	std	Y+33, r24	; 0x21
    349e:	0f c0       	rjmp	.+30     	; 0x34be <main+0x6aa>
    34a0:	88 ec       	ldi	r24, 0xC8	; 200
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	98 a3       	std	Y+32, r25	; 0x20
    34a6:	8f 8f       	std	Y+31, r24	; 0x1f
    34a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34aa:	98 a1       	ldd	r25, Y+32	; 0x20
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <main+0x698>
    34b0:	98 a3       	std	Y+32, r25	; 0x20
    34b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b4:	89 a1       	ldd	r24, Y+33	; 0x21
    34b6:	9a a1       	ldd	r25, Y+34	; 0x22
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	9a a3       	std	Y+34, r25	; 0x22
    34bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34be:	89 a1       	ldd	r24, Y+33	; 0x21
    34c0:	9a a1       	ldd	r25, Y+34	; 0x22
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	69 f7       	brne	.-38     	; 0x34a0 <main+0x68c>
    34c6:	14 c0       	rjmp	.+40     	; 0x34f0 <main+0x6dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ca:	7c a1       	ldd	r23, Y+36	; 0x24
    34cc:	8d a1       	ldd	r24, Y+37	; 0x25
    34ce:	9e a1       	ldd	r25, Y+38	; 0x26
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9a a3       	std	Y+34, r25	; 0x22
    34da:	89 a3       	std	Y+33, r24	; 0x21
    34dc:	89 a1       	ldd	r24, Y+33	; 0x21
    34de:	9a a1       	ldd	r25, Y+34	; 0x22
    34e0:	9e 8f       	std	Y+30, r25	; 0x1e
    34e2:	8d 8f       	std	Y+29, r24	; 0x1d
    34e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <main+0x6d4>
    34ec:	9e 8f       	std	Y+30, r25	; 0x1e
    34ee:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(250);
						passwordIsChanged = FALSE;
    34f0:	fe 01       	movw	r30, r28
    34f2:	eb 5a       	subi	r30, 0xAB	; 171
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	10 82       	st	Z, r1
    34f8:	06 c0       	rjmp	.+12     	; 0x3506 <main+0x6f2>
						/* loop until the password is changed and saved successfully to EEPROM */
						while (passwordIsChanged == FALSE)
						{
							passwordIsChanged = createPassword();
    34fa:	0e 94 b9 1b 	call	0x3772	; 0x3772 <createPassword>
    34fe:	fe 01       	movw	r30, r28
    3500:	eb 5a       	subi	r30, 0xAB	; 171
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 83       	st	Z, r24
						LCD_clearScreen();
						LCD_displayString("Correct Password");
						_delay_ms(250);
						passwordIsChanged = FALSE;
						/* loop until the password is changed and saved successfully to EEPROM */
						while (passwordIsChanged == FALSE)
    3506:	fe 01       	movw	r30, r28
    3508:	eb 5a       	subi	r30, 0xAB	; 171
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	88 23       	and	r24, r24
    3510:	a1 f3       	breq	.-24     	; 0x34fa <main+0x6e6>
						{
							passwordIsChanged = createPassword();
						}
						LCD_clearScreen();
    3512:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("Password Changed");
    3516:	87 e4       	ldi	r24, 0x47	; 71
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						LCD_moveCursor(1, 0);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
						LCD_displayString("  Successfully  ");
    3526:	88 e5       	ldi	r24, 0x58	; 88
    3528:	91 e0       	ldi	r25, 0x01	; 1
    352a:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	aa e7       	ldi	r26, 0x7A	; 122
    3534:	b3 e4       	ldi	r27, 0x43	; 67
    3536:	89 8f       	std	Y+25, r24	; 0x19
    3538:	9a 8f       	std	Y+26, r25	; 0x1a
    353a:	ab 8f       	std	Y+27, r26	; 0x1b
    353c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	69 8d       	ldd	r22, Y+25	; 0x19
    3540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	8d 8b       	std	Y+21, r24	; 0x15
    3558:	9e 8b       	std	Y+22, r25	; 0x16
    355a:	af 8b       	std	Y+23, r26	; 0x17
    355c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    355e:	6d 89       	ldd	r22, Y+21	; 0x15
    3560:	7e 89       	ldd	r23, Y+22	; 0x16
    3562:	8f 89       	ldd	r24, Y+23	; 0x17
    3564:	98 8d       	ldd	r25, Y+24	; 0x18
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <main+0x76c>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9c 8b       	std	Y+20, r25	; 0x14
    357c:	8b 8b       	std	Y+19, r24	; 0x13
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <main+0x7ea>
	else if (__tmp > 65535)
    3580:	6d 89       	ldd	r22, Y+21	; 0x15
    3582:	7e 89       	ldd	r23, Y+22	; 0x16
    3584:	8f 89       	ldd	r24, Y+23	; 0x17
    3586:	98 8d       	ldd	r25, Y+24	; 0x18
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <main+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	69 8d       	ldd	r22, Y+25	; 0x19
    359a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    359c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9c 8b       	std	Y+20, r25	; 0x14
    35be:	8b 8b       	std	Y+19, r24	; 0x13
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <main+0x7cc>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9a 8b       	std	Y+18, r25	; 0x12
    35c8:	89 8b       	std	Y+17, r24	; 0x11
    35ca:	89 89       	ldd	r24, Y+17	; 0x11
    35cc:	9a 89       	ldd	r25, Y+18	; 0x12
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <main+0x7ba>
    35d2:	9a 8b       	std	Y+18, r25	; 0x12
    35d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8b 89       	ldd	r24, Y+19	; 0x13
    35d8:	9c 89       	ldd	r25, Y+20	; 0x14
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9c 8b       	std	Y+20, r25	; 0x14
    35de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8b 89       	ldd	r24, Y+19	; 0x13
    35e2:	9c 89       	ldd	r25, Y+20	; 0x14
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <main+0x7ae>
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <main+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	6d 89       	ldd	r22, Y+21	; 0x15
    35ec:	7e 89       	ldd	r23, Y+22	; 0x16
    35ee:	8f 89       	ldd	r24, Y+23	; 0x17
    35f0:	98 8d       	ldd	r25, Y+24	; 0x18
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9c 8b       	std	Y+20, r25	; 0x14
    35fc:	8b 8b       	std	Y+19, r24	; 0x13
    35fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3600:	9c 89       	ldd	r25, Y+20	; 0x14
    3602:	98 8b       	std	Y+16, r25	; 0x10
    3604:	8f 87       	std	Y+15, r24	; 0x0f
    3606:	8f 85       	ldd	r24, Y+15	; 0x0f
    3608:	98 89       	ldd	r25, Y+16	; 0x10
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <main+0x7f6>
    360e:	98 8b       	std	Y+16, r25	; 0x10
    3610:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(250);
						/* reset the tries variable */
						try = 0;
    3612:	fe 01       	movw	r30, r28
    3614:	e9 5a       	subi	r30, 0xA9	; 169
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	10 82       	st	Z, r1
    361a:	b6 cd       	rjmp	.-1172   	; 0x3188 <main+0x374>
						break;
					}
					else
					{
						LCD_clearScreen();
    361c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    3620:	85 e0       	ldi	r24, 0x05	; 5
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	aa e7       	ldi	r26, 0x7A	; 122
    362e:	b3 e4       	ldi	r27, 0x43	; 67
    3630:	8b 87       	std	Y+11, r24	; 0x0b
    3632:	9c 87       	std	Y+12, r25	; 0x0c
    3634:	ad 87       	std	Y+13, r26	; 0x0d
    3636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	6b 85       	ldd	r22, Y+11	; 0x0b
    363a:	7c 85       	ldd	r23, Y+12	; 0x0c
    363c:	8d 85       	ldd	r24, Y+13	; 0x0d
    363e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	4a ef       	ldi	r20, 0xFA	; 250
    3646:	54 e4       	ldi	r21, 0x44	; 68
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	8f 83       	std	Y+7, r24	; 0x07
    3652:	98 87       	std	Y+8, r25	; 0x08
    3654:	a9 87       	std	Y+9, r26	; 0x09
    3656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3658:	6f 81       	ldd	r22, Y+7	; 0x07
    365a:	78 85       	ldd	r23, Y+8	; 0x08
    365c:	89 85       	ldd	r24, Y+9	; 0x09
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	2c f4       	brge	.+10     	; 0x367a <main+0x866>
		__ticks = 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	3f c0       	rjmp	.+126    	; 0x36f8 <main+0x8e4>
	else if (__tmp > 65535)
    367a:	6f 81       	ldd	r22, Y+7	; 0x07
    367c:	78 85       	ldd	r23, Y+8	; 0x08
    367e:	89 85       	ldd	r24, Y+9	; 0x09
    3680:	9a 85       	ldd	r25, Y+10	; 0x0a
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	3f ef       	ldi	r19, 0xFF	; 255
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	57 e4       	ldi	r21, 0x47	; 71
    368a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	4c f5       	brge	.+82     	; 0x36e4 <main+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	6b 85       	ldd	r22, Y+11	; 0x0b
    3694:	7c 85       	ldd	r23, Y+12	; 0x0c
    3696:	8d 85       	ldd	r24, Y+13	; 0x0d
    3698:	9e 85       	ldd	r25, Y+14	; 0x0e
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <main+0x8c6>
    36bc:	88 ec       	ldi	r24, 0xC8	; 200
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <main+0x8b4>
    36cc:	9c 83       	std	Y+4, r25	; 0x04
    36ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	9e 81       	ldd	r25, Y+6	; 0x06
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	69 f7       	brne	.-38     	; 0x36bc <main+0x8a8>
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <main+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	9e 81       	ldd	r25, Y+6	; 0x06
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <main+0x8f0>
    3708:	9a 83       	std	Y+2, r25	; 0x02
    370a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(250);
						/* each time the entered password is incorrect, the try variable increment by 1 */
						try++;
    370c:	de 01       	movw	r26, r28
    370e:	a9 5a       	subi	r26, 0xA9	; 169
    3710:	bf 4f       	sbci	r27, 0xFF	; 255
    3712:	fe 01       	movw	r30, r28
    3714:	e9 5a       	subi	r30, 0xA9	; 169
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	8c 93       	st	X, r24
						/* if the tries reach to 3, send to control ECU to enable the buzzer */
						if (try == NUMBER_OF_TRIES_FOR_PASSWORD)
    371e:	fe 01       	movw	r30, r28
    3720:	e9 5a       	subi	r30, 0xA9	; 169
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	83 30       	cpi	r24, 0x03	; 3
    3728:	21 f4       	brne	.+8      	; 0x3732 <main+0x91e>
						{
							UART_sendByte(BUZZER_ON);
    372a:	88 e6       	ldi	r24, 0x68	; 104
    372c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
    3730:	03 c0       	rjmp	.+6      	; 0x3738 <main+0x924>
						}
						else
						{
							UART_sendByte(BUZZER_OFF);
    3732:	89 e6       	ldi	r24, 0x69	; 105
    3734:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
						}
					}
					/* if the tries reach to 3, display error massage on LCD */
					if (try == NUMBER_OF_TRIES_FOR_PASSWORD)
    3738:	fe 01       	movw	r30, r28
    373a:	e9 5a       	subi	r30, 0xA9	; 169
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	83 30       	cpi	r24, 0x03	; 3
    3742:	09 f0       	breq	.+2      	; 0x3746 <main+0x932>
    3744:	44 ce       	rjmp	.-888    	; 0x33ce <main+0x5ba>
					{
						LCD_clearScreen();
    3746:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
						LCD_displayString("     ERROR      ");
    374a:	84 e1       	ldi	r24, 0x14	; 20
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						LCD_moveCursor(1, 0);
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
						LCD_displayString(" WRONG 3 TRIES  ");
    375a:	85 e2       	ldi	r24, 0x25	; 37
    375c:	91 e0       	ldi	r25, 0x01	; 1
    375e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
						/* waiting for 1 minute for the */
						timer1DelaySecond(BUZZER_ACTIVE_PERIOD);
    3762:	8c e3       	ldi	r24, 0x3C	; 60
    3764:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <timer1DelaySecond>
						/* reset the tries variable */
						try = 0;
    3768:	fe 01       	movw	r30, r28
    376a:	e9 5a       	subi	r30, 0xA9	; 169
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	10 82       	st	Z, r1
    3770:	0b cd       	rjmp	.-1514   	; 0x3188 <main+0x374>

00003772 <createPassword>:
 * 4. If the two passwords are not matched, then repeat step1.
 * Function input:  void.
 * Function output: void.
 */
uint8 createPassword()
{
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	a8 97       	sbiw	r28, 0x28	; 40
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5]; /* array to save password on it */
	uint8 confirmPassword[5]; /* array to save confirm password on it */
	uint8 flag; /* flag to indicate the matching of two passwords */
	while (1)
	{
		LCD_clearScreen();
    3786:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
		LCD_displayString("plz enter pass:");
    378a:	82 ec       	ldi	r24, 0xC2	; 194
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
		LCD_moveCursor(1, 0);
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
		/* take the password form keypad and save it to password array */
		getPasswordFromKeyPad(password);
    379a:	ce 01       	movw	r24, r28
    379c:	4e 96       	adiw	r24, 0x1e	; 30
    379e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <getPasswordFromKeyPad>
		LCD_clearScreen();
    37a2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
		LCD_displayString("plz re-enter pass the:");
    37a6:	89 e6       	ldi	r24, 0x69	; 105
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
		LCD_moveCursor(1, 0);
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
		LCD_displayString("same pass: ");
    37b6:	80 e8       	ldi	r24, 0x80	; 128
    37b8:	91 e0       	ldi	r25, 0x01	; 1
    37ba:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
		LCD_moveCursor(1, 11);
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	6b e0       	ldi	r22, 0x0B	; 11
    37c2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
		/* take the confirm password form keypad and compare it with password */
		flag = comparePasswords(password, confirmPassword);
    37c6:	ce 01       	movw	r24, r28
    37c8:	4e 96       	adiw	r24, 0x1e	; 30
    37ca:	9e 01       	movw	r18, r28
    37cc:	2d 5d       	subi	r18, 0xDD	; 221
    37ce:	3f 4f       	sbci	r19, 0xFF	; 255
    37d0:	b9 01       	movw	r22, r18
    37d2:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <comparePasswords>
    37d6:	8d 8f       	std	Y+29, r24	; 0x1d
		/* if flag became true, that mean the two passwords are matched */
		if (flag == TRUE)
    37d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	09 f0       	breq	.+2      	; 0x37e0 <createPassword+0x6e>
    37de:	87 c0       	rjmp	.+270    	; 0x38ee <createPassword+0x17c>
		{
			/* then send password to control ECU to save it in EEPROM */
			sendPasswordToControlECU(password);
    37e0:	ce 01       	movw	r24, r28
    37e2:	4e 96       	adiw	r24, 0x1e	; 30
    37e4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <sendPasswordToControlECU>
			LCD_clearScreen();
    37e8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
			LCD_displayString("The 2 Passwords");
    37ec:	8c e8       	ldi	r24, 0x8C	; 140
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
			LCD_moveCursor(1, 0);
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	60 e0       	ldi	r22, 0x00	; 0
    37f8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
			LCD_displayString("Are Equal :)");
    37fc:	8c e9       	ldi	r24, 0x9C	; 156
    37fe:	91 e0       	ldi	r25, 0x01	; 1
    3800:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	aa e7       	ldi	r26, 0x7A	; 122
    380a:	b3 e4       	ldi	r27, 0x43	; 67
    380c:	89 8f       	std	Y+25, r24	; 0x19
    380e:	9a 8f       	std	Y+26, r25	; 0x1a
    3810:	ab 8f       	std	Y+27, r26	; 0x1b
    3812:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	69 8d       	ldd	r22, Y+25	; 0x19
    3816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    381a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8d 8b       	std	Y+21, r24	; 0x15
    382e:	9e 8b       	std	Y+22, r25	; 0x16
    3830:	af 8b       	std	Y+23, r26	; 0x17
    3832:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3834:	6d 89       	ldd	r22, Y+21	; 0x15
    3836:	7e 89       	ldd	r23, Y+22	; 0x16
    3838:	8f 89       	ldd	r24, Y+23	; 0x17
    383a:	98 8d       	ldd	r25, Y+24	; 0x18
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <createPassword+0xe4>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	9c 8b       	std	Y+20, r25	; 0x14
    3852:	8b 8b       	std	Y+19, r24	; 0x13
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <createPassword+0x162>
	else if (__tmp > 65535)
    3856:	6d 89       	ldd	r22, Y+21	; 0x15
    3858:	7e 89       	ldd	r23, Y+22	; 0x16
    385a:	8f 89       	ldd	r24, Y+23	; 0x17
    385c:	98 8d       	ldd	r25, Y+24	; 0x18
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <createPassword+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	69 8d       	ldd	r22, Y+25	; 0x19
    3870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9c 8b       	std	Y+20, r25	; 0x14
    3894:	8b 8b       	std	Y+19, r24	; 0x13
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <createPassword+0x144>
    3898:	88 ec       	ldi	r24, 0xC8	; 200
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9a 8b       	std	Y+18, r25	; 0x12
    389e:	89 8b       	std	Y+17, r24	; 0x11
    38a0:	89 89       	ldd	r24, Y+17	; 0x11
    38a2:	9a 89       	ldd	r25, Y+18	; 0x12
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <createPassword+0x132>
    38a8:	9a 8b       	std	Y+18, r25	; 0x12
    38aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8b 89       	ldd	r24, Y+19	; 0x13
    38ae:	9c 89       	ldd	r25, Y+20	; 0x14
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	9c 8b       	std	Y+20, r25	; 0x14
    38b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8b 89       	ldd	r24, Y+19	; 0x13
    38b8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <createPassword+0x126>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <createPassword+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6d 89       	ldd	r22, Y+21	; 0x15
    38c2:	7e 89       	ldd	r23, Y+22	; 0x16
    38c4:	8f 89       	ldd	r24, Y+23	; 0x17
    38c6:	98 8d       	ldd	r25, Y+24	; 0x18
    38c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	9c 8b       	std	Y+20, r25	; 0x14
    38d2:	8b 8b       	std	Y+19, r24	; 0x13
    38d4:	8b 89       	ldd	r24, Y+19	; 0x13
    38d6:	9c 89       	ldd	r25, Y+20	; 0x14
    38d8:	98 8b       	std	Y+16, r25	; 0x10
    38da:	8f 87       	std	Y+15, r24	; 0x0f
    38dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38de:	98 89       	ldd	r25, Y+16	; 0x10
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <createPassword+0x16e>
    38e4:	98 8b       	std	Y+16, r25	; 0x10
    38e6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			/* return true to not repeat this step as password created successfully */
			return TRUE;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	88 a7       	std	Y+40, r24	; 0x28
    38ec:	81 c0       	rjmp	.+258    	; 0x39f0 <createPassword+0x27e>
			break;
		}
		else
		{
			LCD_clearScreen();
    38ee:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_clearScreen>
			LCD_displayString("The 2 Passwords");
    38f2:	8c e8       	ldi	r24, 0x8C	; 140
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
			LCD_moveCursor(1, 0);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_moveCursor>
			LCD_displayString("Are Not Equal :(");
    3902:	89 ea       	ldi	r24, 0xA9	; 169
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayString>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	aa e7       	ldi	r26, 0x7A	; 122
    3910:	b3 e4       	ldi	r27, 0x43	; 67
    3912:	8b 87       	std	Y+11, r24	; 0x0b
    3914:	9c 87       	std	Y+12, r25	; 0x0c
    3916:	ad 87       	std	Y+13, r26	; 0x0d
    3918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	6b 85       	ldd	r22, Y+11	; 0x0b
    391c:	7c 85       	ldd	r23, Y+12	; 0x0c
    391e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3920:	9e 85       	ldd	r25, Y+14	; 0x0e
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	4a ef       	ldi	r20, 0xFA	; 250
    3928:	54 e4       	ldi	r21, 0x44	; 68
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8f 83       	std	Y+7, r24	; 0x07
    3934:	98 87       	std	Y+8, r25	; 0x08
    3936:	a9 87       	std	Y+9, r26	; 0x09
    3938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    393a:	6f 81       	ldd	r22, Y+7	; 0x07
    393c:	78 85       	ldd	r23, Y+8	; 0x08
    393e:	89 85       	ldd	r24, Y+9	; 0x09
    3940:	9a 85       	ldd	r25, Y+10	; 0x0a
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	2c f4       	brge	.+10     	; 0x395c <createPassword+0x1ea>
		__ticks = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9e 83       	std	Y+6, r25	; 0x06
    3958:	8d 83       	std	Y+5, r24	; 0x05
    395a:	3f c0       	rjmp	.+126    	; 0x39da <createPassword+0x268>
	else if (__tmp > 65535)
    395c:	6f 81       	ldd	r22, Y+7	; 0x07
    395e:	78 85       	ldd	r23, Y+8	; 0x08
    3960:	89 85       	ldd	r24, Y+9	; 0x09
    3962:	9a 85       	ldd	r25, Y+10	; 0x0a
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	4c f5       	brge	.+82     	; 0x39c6 <createPassword+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	6b 85       	ldd	r22, Y+11	; 0x0b
    3976:	7c 85       	ldd	r23, Y+12	; 0x0c
    3978:	8d 85       	ldd	r24, Y+13	; 0x0d
    397a:	9e 85       	ldd	r25, Y+14	; 0x0e
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e2       	ldi	r20, 0x20	; 32
    3982:	51 e4       	ldi	r21, 0x41	; 65
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9e 83       	std	Y+6, r25	; 0x06
    399a:	8d 83       	std	Y+5, r24	; 0x05
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <createPassword+0x24a>
    399e:	88 ec       	ldi	r24, 0xC8	; 200
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9c 83       	std	Y+4, r25	; 0x04
    39a4:	8b 83       	std	Y+3, r24	; 0x03
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	9c 81       	ldd	r25, Y+4	; 0x04
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <createPassword+0x238>
    39ae:	9c 83       	std	Y+4, r25	; 0x04
    39b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39bc:	8d 81       	ldd	r24, Y+5	; 0x05
    39be:	9e 81       	ldd	r25, Y+6	; 0x06
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	69 f7       	brne	.-38     	; 0x399e <createPassword+0x22c>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <createPassword+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c6:	6f 81       	ldd	r22, Y+7	; 0x07
    39c8:	78 85       	ldd	r23, Y+8	; 0x08
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	8d 81       	ldd	r24, Y+5	; 0x05
    39dc:	9e 81       	ldd	r25, Y+6	; 0x06
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <createPassword+0x274>
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			/* return false to repeat this step as password is not created successfully */
			return FALSE;
    39ee:	18 a6       	std	Y+40, r1	; 0x28
    39f0:	88 a5       	ldd	r24, Y+40	; 0x28
		}
	}
}
    39f2:	a8 96       	adiw	r28, 0x28	; 40
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <getPasswordFromKeyPad>:
 * Function to active keypad to get input number from it.
 * Function input:  array of uint8 to save numbers from keypad on it.
 * Function output: void.
 */
void getPasswordFromKeyPad(uint8 password[])
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
    3a0c:	62 97       	sbiw	r28, 0x12	; 18
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	de bf       	out	0x3e, r29	; 62
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	9a 8b       	std	Y+18, r25	; 0x12
    3a1a:	89 8b       	std	Y+17, r24	; 0x11
	uint8 i, temp;
	i = 0; /* the index and counter for the loop and equal 5 as password is 5 numbers */
    3a1c:	18 8a       	std	Y+16, r1	; 0x10
    3a1e:	91 c0       	rjmp	.+290    	; 0x3b42 <getPasswordFromKeyPad+0x13e>
	while (i < PASSWORD_LENGTH)
	{
		/* take the input number form keypad */
		temp = KEYPAD_getPressedKey();
    3a20:	0e 94 76 15 	call	0x2aec	; 0x2aec <KEYPAD_getPressedKey>
    3a24:	8f 87       	std	Y+15, r24	; 0x0f
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	aa e7       	ldi	r26, 0x7A	; 122
    3a2c:	b3 e4       	ldi	r27, 0x43	; 67
    3a2e:	8b 87       	std	Y+11, r24	; 0x0b
    3a30:	9c 87       	std	Y+12, r25	; 0x0c
    3a32:	ad 87       	std	Y+13, r26	; 0x0d
    3a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a ef       	ldi	r20, 0xFA	; 250
    3a44:	54 e4       	ldi	r21, 0x44	; 68
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
    3a50:	98 87       	std	Y+8, r25	; 0x08
    3a52:	a9 87       	std	Y+9, r26	; 0x09
    3a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a56:	6f 81       	ldd	r22, Y+7	; 0x07
    3a58:	78 85       	ldd	r23, Y+8	; 0x08
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	2c f4       	brge	.+10     	; 0x3a78 <getPasswordFromKeyPad+0x74>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <getPasswordFromKeyPad+0xf2>
	else if (__tmp > 65535)
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	4c f5       	brge	.+82     	; 0x3ae2 <getPasswordFromKeyPad+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	51 e4       	ldi	r21, 0x41	; 65
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	0f c0       	rjmp	.+30     	; 0x3ad8 <getPasswordFromKeyPad+0xd4>
    3aba:	88 ec       	ldi	r24, 0xC8	; 200
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <getPasswordFromKeyPad+0xc2>
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	69 f7       	brne	.-38     	; 0x3aba <getPasswordFromKeyPad+0xb6>
    3ae0:	14 c0       	rjmp	.+40     	; 0x3b0a <getPasswordFromKeyPad+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae4:	78 85       	ldd	r23, Y+8	; 0x08
    3ae6:	89 85       	ldd	r24, Y+9	; 0x09
    3ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9e 83       	std	Y+6, r25	; 0x06
    3af4:	8d 83       	std	Y+5, r24	; 0x05
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <getPasswordFromKeyPad+0xfe>
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
		/* wait 250msec before getting a new press from the keypad buttons, Press time is 250msec */
		_delay_ms(250);
		/* if the input is not a number form 0 to 9 then repeat taking input step */
		/* ^ for the keys don't have a number or # or - or + */
		if (temp == '^' || temp == '#' || temp == '-' || temp == '+')
    3b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b0c:	8e 35       	cpi	r24, 0x5E	; 94
    3b0e:	c9 f0       	breq	.+50     	; 0x3b42 <getPasswordFromKeyPad+0x13e>
    3b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b12:	83 32       	cpi	r24, 0x23	; 35
    3b14:	b1 f0       	breq	.+44     	; 0x3b42 <getPasswordFromKeyPad+0x13e>
    3b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b18:	8d 32       	cpi	r24, 0x2D	; 45
    3b1a:	99 f0       	breq	.+38     	; 0x3b42 <getPasswordFromKeyPad+0x13e>
    3b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1e:	8b 32       	cpi	r24, 0x2B	; 43
    3b20:	81 f0       	breq	.+32     	; 0x3b42 <getPasswordFromKeyPad+0x13e>
		{
			continue;
		}
		/* the input is a number, then save it to its index in array */
		password[i] = temp;
    3b22:	88 89       	ldd	r24, Y+16	; 0x10
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	89 89       	ldd	r24, Y+17	; 0x11
    3b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e2 0f       	add	r30, r18
    3b30:	f3 1f       	adc	r31, r19
    3b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b34:	80 83       	st	Z, r24
		/* display the * char in LCD */
		LCD_displayCharacter('*');
    3b36:	8a e2       	ldi	r24, 0x2A	; 42
    3b38:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_displayCharacter>
		/* increment the index */
		i++;
    3b3c:	88 89       	ldd	r24, Y+16	; 0x10
    3b3e:	8f 5f       	subi	r24, 0xFF	; 255
    3b40:	88 8b       	std	Y+16, r24	; 0x10
 */
void getPasswordFromKeyPad(uint8 password[])
{
	uint8 i, temp;
	i = 0; /* the index and counter for the loop and equal 5 as password is 5 numbers */
	while (i < PASSWORD_LENGTH)
    3b42:	88 89       	ldd	r24, Y+16	; 0x10
    3b44:	85 30       	cpi	r24, 0x05	; 5
    3b46:	08 f4       	brcc	.+2      	; 0x3b4a <getPasswordFromKeyPad+0x146>
    3b48:	6b cf       	rjmp	.-298    	; 0x3a20 <getPasswordFromKeyPad+0x1c>
		LCD_displayCharacter('*');
		/* increment the index */
		i++;
	}
	/* waiting for pressing enter key */
	while (KEYPAD_getPressedKey() != '#')
    3b4a:	0e 94 76 15 	call	0x2aec	; 0x2aec <KEYPAD_getPressedKey>
    3b4e:	83 32       	cpi	r24, 0x23	; 35
    3b50:	e1 f7       	brne	.-8      	; 0x3b4a <getPasswordFromKeyPad+0x146>
		;
}
    3b52:	62 96       	adiw	r28, 0x12	; 18
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <comparePasswords>:
 * Function to take confirm password then compare it with password and return if matched or not.
 * Function input:  two arrays of uint8 to compare between them.
 * Function output: uint8 flag that indicate the matching of passwords.
 */
uint8 comparePasswords(uint8 password[], uint8 confirmPassword[])
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	65 97       	sbiw	r28, 0x15	; 21
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	f8 94       	cli
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	cd bf       	out	0x3d, r28	; 61
    3b78:	9b 8b       	std	Y+19, r25	; 0x13
    3b7a:	8a 8b       	std	Y+18, r24	; 0x12
    3b7c:	7d 8b       	std	Y+21, r23	; 0x15
    3b7e:	6c 8b       	std	Y+20, r22	; 0x14
	uint8 i, temp, matchingFlag = TRUE;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
	i = 0;
    3b84:	19 8a       	std	Y+17, r1	; 0x11
    3b86:	a6 c0       	rjmp	.+332    	; 0x3cd4 <comparePasswords+0x170>
	while (i < PASSWORD_LENGTH)
	{
		/* take the input number form keypad */
		temp = KEYPAD_getPressedKey();
    3b88:	0e 94 76 15 	call	0x2aec	; 0x2aec <KEYPAD_getPressedKey>
    3b8c:	88 8b       	std	Y+16, r24	; 0x10
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	aa e7       	ldi	r26, 0x7A	; 122
    3b94:	b3 e4       	ldi	r27, 0x43	; 67
    3b96:	8b 87       	std	Y+11, r24	; 0x0b
    3b98:	9c 87       	std	Y+12, r25	; 0x0c
    3b9a:	ad 87       	std	Y+13, r26	; 0x0d
    3b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a ef       	ldi	r20, 0xFA	; 250
    3bac:	54 e4       	ldi	r21, 0x44	; 68
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8f 83       	std	Y+7, r24	; 0x07
    3bb8:	98 87       	std	Y+8, r25	; 0x08
    3bba:	a9 87       	std	Y+9, r26	; 0x09
    3bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc0:	78 85       	ldd	r23, Y+8	; 0x08
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <comparePasswords+0x7c>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <comparePasswords+0xfa>
	else if (__tmp > 65535)
    3be0:	6f 81       	ldd	r22, Y+7	; 0x07
    3be2:	78 85       	ldd	r23, Y+8	; 0x08
    3be4:	89 85       	ldd	r24, Y+9	; 0x09
    3be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <comparePasswords+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9e 83       	std	Y+6, r25	; 0x06
    3c1e:	8d 83       	std	Y+5, r24	; 0x05
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <comparePasswords+0xdc>
    3c22:	88 ec       	ldi	r24, 0xC8	; 200
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9c 83       	std	Y+4, r25	; 0x04
    3c28:	8b 83       	std	Y+3, r24	; 0x03
    3c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <comparePasswords+0xca>
    3c32:	9c 83       	std	Y+4, r25	; 0x04
    3c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <comparePasswords+0xbe>
    3c48:	14 c0       	rjmp	.+40     	; 0x3c72 <comparePasswords+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9e 83       	std	Y+6, r25	; 0x06
    3c5c:	8d 83       	std	Y+5, r24	; 0x05
    3c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c60:	9e 81       	ldd	r25, Y+6	; 0x06
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <comparePasswords+0x106>
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
		/* wait 250msec before getting a new press from the keypad buttons, Press time is 250msec */
		_delay_ms(250);
		/* if the input is not a number form 0 to 9 then repeat taking input step */
		if (temp == '^' || temp == '#' || temp == '-' || temp == '+')
    3c72:	88 89       	ldd	r24, Y+16	; 0x10
    3c74:	8e 35       	cpi	r24, 0x5E	; 94
    3c76:	71 f1       	breq	.+92     	; 0x3cd4 <comparePasswords+0x170>
    3c78:	88 89       	ldd	r24, Y+16	; 0x10
    3c7a:	83 32       	cpi	r24, 0x23	; 35
    3c7c:	59 f1       	breq	.+86     	; 0x3cd4 <comparePasswords+0x170>
    3c7e:	88 89       	ldd	r24, Y+16	; 0x10
    3c80:	8d 32       	cpi	r24, 0x2D	; 45
    3c82:	41 f1       	breq	.+80     	; 0x3cd4 <comparePasswords+0x170>
    3c84:	88 89       	ldd	r24, Y+16	; 0x10
    3c86:	8b 32       	cpi	r24, 0x2B	; 43
    3c88:	29 f1       	breq	.+74     	; 0x3cd4 <comparePasswords+0x170>
		{
			continue;
		}
		/* the input is a number, then save it to its index in array */
		confirmPassword[i] = temp;
    3c8a:	89 89       	ldd	r24, Y+17	; 0x11
    3c8c:	28 2f       	mov	r18, r24
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	8c 89       	ldd	r24, Y+20	; 0x14
    3c92:	9d 89       	ldd	r25, Y+21	; 0x15
    3c94:	fc 01       	movw	r30, r24
    3c96:	e2 0f       	add	r30, r18
    3c98:	f3 1f       	adc	r31, r19
    3c9a:	88 89       	ldd	r24, Y+16	; 0x10
    3c9c:	80 83       	st	Z, r24
		/* check each element of both array if equal or not */
		if (confirmPassword[i] != password[i])
    3c9e:	89 89       	ldd	r24, Y+17	; 0x11
    3ca0:	28 2f       	mov	r18, r24
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	8c 89       	ldd	r24, Y+20	; 0x14
    3ca6:	9d 89       	ldd	r25, Y+21	; 0x15
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e2 0f       	add	r30, r18
    3cac:	f3 1f       	adc	r31, r19
    3cae:	40 81       	ld	r20, Z
    3cb0:	89 89       	ldd	r24, Y+17	; 0x11
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	8a 89       	ldd	r24, Y+18	; 0x12
    3cb8:	9b 89       	ldd	r25, Y+19	; 0x13
    3cba:	fc 01       	movw	r30, r24
    3cbc:	e2 0f       	add	r30, r18
    3cbe:	f3 1f       	adc	r31, r19
    3cc0:	80 81       	ld	r24, Z
    3cc2:	48 17       	cp	r20, r24
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <comparePasswords+0x164>
		{
			/* if not equal then two passwords are not matched and flag become false */
			matchingFlag = FALSE;
    3cc6:	1f 86       	std	Y+15, r1	; 0x0f
		}
		/* display the * char in LCD */
		LCD_displayCharacter('*');
    3cc8:	8a e2       	ldi	r24, 0x2A	; 42
    3cca:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_displayCharacter>
		/* increment the index */
		i++;
    3cce:	89 89       	ldd	r24, Y+17	; 0x11
    3cd0:	8f 5f       	subi	r24, 0xFF	; 255
    3cd2:	89 8b       	std	Y+17, r24	; 0x11
 */
uint8 comparePasswords(uint8 password[], uint8 confirmPassword[])
{
	uint8 i, temp, matchingFlag = TRUE;
	i = 0;
	while (i < PASSWORD_LENGTH)
    3cd4:	89 89       	ldd	r24, Y+17	; 0x11
    3cd6:	85 30       	cpi	r24, 0x05	; 5
    3cd8:	08 f4       	brcc	.+2      	; 0x3cdc <comparePasswords+0x178>
    3cda:	56 cf       	rjmp	.-340    	; 0x3b88 <comparePasswords+0x24>
		LCD_displayCharacter('*');
		/* increment the index */
		i++;
	}
	/* waiting for pressing enter key */
	while (KEYPAD_getPressedKey() != '#')
    3cdc:	0e 94 76 15 	call	0x2aec	; 0x2aec <KEYPAD_getPressedKey>
    3ce0:	83 32       	cpi	r24, 0x23	; 35
    3ce2:	e1 f7       	brne	.-8      	; 0x3cdc <comparePasswords+0x178>
		;
	/* return the matching flag */
	return matchingFlag;
    3ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3ce6:	65 96       	adiw	r28, 0x15	; 21
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	cf 91       	pop	r28
    3cf4:	df 91       	pop	r29
    3cf6:	08 95       	ret

00003cf8 <sendPasswordToControlECU>:
 * Function to send password through UART to control ECU.
 * Function input:  array of uint8 to send it to control ECU.
 * Function output: void.
 */
void sendPasswordToControlECU(uint8 password[])
{
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <sendPasswordToControlECU+0x6>
    3cfe:	0f 92       	push	r0
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	9b 83       	std	Y+3, r25	; 0x03
    3d06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	i = 0;
    3d08:	19 82       	std	Y+1, r1	; 0x01
    3d0a:	12 c0       	rjmp	.+36     	; 0x3d30 <sendPasswordToControlECU+0x38>
	while (i < PASSWORD_LENGTH)
	{
		/* send the password byte by byte to control ECU through UART  */
		UART_sendByte(password[i]);
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	28 2f       	mov	r18, r24
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	9b 81       	ldd	r25, Y+3	; 0x03
    3d16:	fc 01       	movw	r30, r24
    3d18:	e2 0f       	add	r30, r18
    3d1a:	f3 1f       	adc	r31, r19
    3d1c:	80 81       	ld	r24, Z
    3d1e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <UART_sendByte>
		i++;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	8f 5f       	subi	r24, 0xFF	; 255
    3d26:	89 83       	std	Y+1, r24	; 0x01
		/* waiting the replay from control that it is ready to receive again */
		while (UART_recieveByte() != START_COMMNUCATION)
    3d28:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_recieveByte>
    3d2c:	85 31       	cpi	r24, 0x15	; 21
    3d2e:	e1 f7       	brne	.-8      	; 0x3d28 <sendPasswordToControlECU+0x30>
 */
void sendPasswordToControlECU(uint8 password[])
{
	uint8 i;
	i = 0;
	while (i < PASSWORD_LENGTH)
    3d30:	89 81       	ldd	r24, Y+1	; 0x01
    3d32:	85 30       	cpi	r24, 0x05	; 5
    3d34:	58 f3       	brcs	.-42     	; 0x3d0c <sendPasswordToControlECU+0x14>
		i++;
		/* waiting the replay from control that it is ready to receive again */
		while (UART_recieveByte() != START_COMMNUCATION)
			;
	}
}
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	cf 91       	pop	r28
    3d3e:	df 91       	pop	r29
    3d40:	08 95       	ret

00003d42 <timer1DelaySecond>:
 * Function to count a number of seconds which passed to it.
 * Function input:  number of seconds.
 * Function output: void.
 */
void timer1DelaySecond(uint8 n)
{
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	2c 97       	sbiw	r28, 0x0c	; 12
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	8f 83       	std	Y+7, r24	; 0x07
	/* select the configuration of TIMER1 */
	TIMER1_ConfigType TIMER1_config =
	{ CTC_INITIAL_VALUE, CTC_VALUE_FOR_ONE_SECOND, CTC_MODE,
			TIMER1_PRESCALER_256 };
    3d58:	ce 01       	movw	r24, r28
    3d5a:	01 96       	adiw	r24, 0x01	; 1
    3d5c:	99 87       	std	Y+9, r25	; 0x09
    3d5e:	88 87       	std	Y+8, r24	; 0x08
    3d60:	ea ec       	ldi	r30, 0xCA	; 202
    3d62:	f1 e0       	ldi	r31, 0x01	; 1
    3d64:	fb 87       	std	Y+11, r31	; 0x0b
    3d66:	ea 87       	std	Y+10, r30	; 0x0a
    3d68:	f6 e0       	ldi	r31, 0x06	; 6
    3d6a:	fc 87       	std	Y+12, r31	; 0x0c
    3d6c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d6e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d70:	00 80       	ld	r0, Z
    3d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d76:	01 96       	adiw	r24, 0x01	; 1
    3d78:	9b 87       	std	Y+11, r25	; 0x0b
    3d7a:	8a 87       	std	Y+10, r24	; 0x0a
    3d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d80:	00 82       	st	Z, r0
    3d82:	88 85       	ldd	r24, Y+8	; 0x08
    3d84:	99 85       	ldd	r25, Y+9	; 0x09
    3d86:	01 96       	adiw	r24, 0x01	; 1
    3d88:	99 87       	std	Y+9, r25	; 0x09
    3d8a:	88 87       	std	Y+8, r24	; 0x08
    3d8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d8e:	91 50       	subi	r25, 0x01	; 1
    3d90:	9c 87       	std	Y+12, r25	; 0x0c
    3d92:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d94:	ee 23       	and	r30, r30
    3d96:	51 f7       	brne	.-44     	; 0x3d6c <timer1DelaySecond+0x2a>
	/* setup the call back function */
	Timer1_setCallBack(countOneSecond);
    3d98:	86 ee       	ldi	r24, 0xE6	; 230
    3d9a:	9e e1       	ldi	r25, 0x1E	; 30
    3d9c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Timer1_setCallBack>
	/* passing the configuration to initialization function of TIMER1 */
	Timer1_init(&TIMER1_config);
    3da0:	ce 01       	movw	r24, r28
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	0e 94 33 07 	call	0xe66	; 0xe66 <Timer1_init>
	/* waiting for 15 seconds until the door is unlocking */
	while (g_ticks < n)
    3da8:	90 91 d2 01 	lds	r25, 0x01D2
    3dac:	8f 81       	ldd	r24, Y+7	; 0x07
    3dae:	98 17       	cp	r25, r24
    3db0:	d8 f3       	brcs	.-10     	; 0x3da8 <timer1DelaySecond+0x66>
		;
	/* reset the global variable of ticks */
	g_ticks = 0;
    3db2:	10 92 d2 01 	sts	0x01D2, r1
	/* stop the timer1 */
	Timer1_deInit();
    3db6:	0e 94 a4 07 	call	0xf48	; 0xf48 <Timer1_deInit>
}
    3dba:	2c 96       	adiw	r28, 0x0c	; 12
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <countOneSecond>:
 * This is the call back function which will be executed each interrupt in timer1.
 * Function input:  void.
 * Function output: void.
 */
void countOneSecond()
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
	/* this function is executed each 1 second as the configuration that passed to timer1*/
	g_ticks++;
    3dd4:	80 91 d2 01 	lds	r24, 0x01D2
    3dd8:	8f 5f       	subi	r24, 0xFF	; 255
    3dda:	80 93 d2 01 	sts	0x01D2, r24
}
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <__udivmodsi4>:
    3de4:	a1 e2       	ldi	r26, 0x21	; 33
    3de6:	1a 2e       	mov	r1, r26
    3de8:	aa 1b       	sub	r26, r26
    3dea:	bb 1b       	sub	r27, r27
    3dec:	fd 01       	movw	r30, r26
    3dee:	0d c0       	rjmp	.+26     	; 0x3e0a <__udivmodsi4_ep>

00003df0 <__udivmodsi4_loop>:
    3df0:	aa 1f       	adc	r26, r26
    3df2:	bb 1f       	adc	r27, r27
    3df4:	ee 1f       	adc	r30, r30
    3df6:	ff 1f       	adc	r31, r31
    3df8:	a2 17       	cp	r26, r18
    3dfa:	b3 07       	cpc	r27, r19
    3dfc:	e4 07       	cpc	r30, r20
    3dfe:	f5 07       	cpc	r31, r21
    3e00:	20 f0       	brcs	.+8      	; 0x3e0a <__udivmodsi4_ep>
    3e02:	a2 1b       	sub	r26, r18
    3e04:	b3 0b       	sbc	r27, r19
    3e06:	e4 0b       	sbc	r30, r20
    3e08:	f5 0b       	sbc	r31, r21

00003e0a <__udivmodsi4_ep>:
    3e0a:	66 1f       	adc	r22, r22
    3e0c:	77 1f       	adc	r23, r23
    3e0e:	88 1f       	adc	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	1a 94       	dec	r1
    3e14:	69 f7       	brne	.-38     	; 0x3df0 <__udivmodsi4_loop>
    3e16:	60 95       	com	r22
    3e18:	70 95       	com	r23
    3e1a:	80 95       	com	r24
    3e1c:	90 95       	com	r25
    3e1e:	9b 01       	movw	r18, r22
    3e20:	ac 01       	movw	r20, r24
    3e22:	bd 01       	movw	r22, r26
    3e24:	cf 01       	movw	r24, r30
    3e26:	08 95       	ret

00003e28 <__prologue_saves__>:
    3e28:	2f 92       	push	r2
    3e2a:	3f 92       	push	r3
    3e2c:	4f 92       	push	r4
    3e2e:	5f 92       	push	r5
    3e30:	6f 92       	push	r6
    3e32:	7f 92       	push	r7
    3e34:	8f 92       	push	r8
    3e36:	9f 92       	push	r9
    3e38:	af 92       	push	r10
    3e3a:	bf 92       	push	r11
    3e3c:	cf 92       	push	r12
    3e3e:	df 92       	push	r13
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	ca 1b       	sub	r28, r26
    3e52:	db 0b       	sbc	r29, r27
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
    3e5e:	09 94       	ijmp

00003e60 <__epilogue_restores__>:
    3e60:	2a 88       	ldd	r2, Y+18	; 0x12
    3e62:	39 88       	ldd	r3, Y+17	; 0x11
    3e64:	48 88       	ldd	r4, Y+16	; 0x10
    3e66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e72:	b9 84       	ldd	r11, Y+9	; 0x09
    3e74:	c8 84       	ldd	r12, Y+8	; 0x08
    3e76:	df 80       	ldd	r13, Y+7	; 0x07
    3e78:	ee 80       	ldd	r14, Y+6	; 0x06
    3e7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e80:	aa 81       	ldd	r26, Y+2	; 0x02
    3e82:	b9 81       	ldd	r27, Y+1	; 0x01
    3e84:	ce 0f       	add	r28, r30
    3e86:	d1 1d       	adc	r29, r1
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	ed 01       	movw	r28, r26
    3e94:	08 95       	ret

00003e96 <itoa>:
    3e96:	fb 01       	movw	r30, r22
    3e98:	9f 01       	movw	r18, r30
    3e9a:	e8 94       	clt
    3e9c:	42 30       	cpi	r20, 0x02	; 2
    3e9e:	c4 f0       	brlt	.+48     	; 0x3ed0 <itoa+0x3a>
    3ea0:	45 32       	cpi	r20, 0x25	; 37
    3ea2:	b4 f4       	brge	.+44     	; 0x3ed0 <itoa+0x3a>
    3ea4:	4a 30       	cpi	r20, 0x0A	; 10
    3ea6:	29 f4       	brne	.+10     	; 0x3eb2 <itoa+0x1c>
    3ea8:	97 fb       	bst	r25, 7
    3eaa:	1e f4       	brtc	.+6      	; 0x3eb2 <itoa+0x1c>
    3eac:	90 95       	com	r25
    3eae:	81 95       	neg	r24
    3eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb2:	64 2f       	mov	r22, r20
    3eb4:	77 27       	eor	r23, r23
    3eb6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__udivmodhi4>
    3eba:	80 5d       	subi	r24, 0xD0	; 208
    3ebc:	8a 33       	cpi	r24, 0x3A	; 58
    3ebe:	0c f0       	brlt	.+2      	; 0x3ec2 <itoa+0x2c>
    3ec0:	89 5d       	subi	r24, 0xD9	; 217
    3ec2:	81 93       	st	Z+, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	a1 f7       	brne	.-24     	; 0x3eb2 <itoa+0x1c>
    3eca:	16 f4       	brtc	.+4      	; 0x3ed0 <itoa+0x3a>
    3ecc:	5d e2       	ldi	r21, 0x2D	; 45
    3ece:	51 93       	st	Z+, r21
    3ed0:	10 82       	st	Z, r1
    3ed2:	c9 01       	movw	r24, r18
    3ed4:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <strrev>

00003ed8 <strrev>:
    3ed8:	dc 01       	movw	r26, r24
    3eda:	fc 01       	movw	r30, r24
    3edc:	67 2f       	mov	r22, r23
    3ede:	71 91       	ld	r23, Z+
    3ee0:	77 23       	and	r23, r23
    3ee2:	e1 f7       	brne	.-8      	; 0x3edc <strrev+0x4>
    3ee4:	32 97       	sbiw	r30, 0x02	; 2
    3ee6:	04 c0       	rjmp	.+8      	; 0x3ef0 <strrev+0x18>
    3ee8:	7c 91       	ld	r23, X
    3eea:	6d 93       	st	X+, r22
    3eec:	70 83       	st	Z, r23
    3eee:	62 91       	ld	r22, -Z
    3ef0:	ae 17       	cp	r26, r30
    3ef2:	bf 07       	cpc	r27, r31
    3ef4:	c8 f3       	brcs	.-14     	; 0x3ee8 <strrev+0x10>
    3ef6:	08 95       	ret

00003ef8 <__udivmodhi4>:
    3ef8:	aa 1b       	sub	r26, r26
    3efa:	bb 1b       	sub	r27, r27
    3efc:	51 e1       	ldi	r21, 0x11	; 17
    3efe:	07 c0       	rjmp	.+14     	; 0x3f0e <__udivmodhi4_ep>

00003f00 <__udivmodhi4_loop>:
    3f00:	aa 1f       	adc	r26, r26
    3f02:	bb 1f       	adc	r27, r27
    3f04:	a6 17       	cp	r26, r22
    3f06:	b7 07       	cpc	r27, r23
    3f08:	10 f0       	brcs	.+4      	; 0x3f0e <__udivmodhi4_ep>
    3f0a:	a6 1b       	sub	r26, r22
    3f0c:	b7 0b       	sbc	r27, r23

00003f0e <__udivmodhi4_ep>:
    3f0e:	88 1f       	adc	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	5a 95       	dec	r21
    3f14:	a9 f7       	brne	.-22     	; 0x3f00 <__udivmodhi4_loop>
    3f16:	80 95       	com	r24
    3f18:	90 95       	com	r25
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	08 95       	ret

00003f20 <_exit>:
    3f20:	f8 94       	cli

00003f22 <__stop_program>:
    3f22:	ff cf       	rjmp	.-2      	; 0x3f22 <__stop_program>
